"""Door Detail Parameters"""

__title__ = "Door Detail Parameters"
__author__= "J K Roshan\nKerketta"

from pyrevit.coreutils import envvars
from decimal import *
from pyrevit import forms
from pyrevit import script
from pyrevit import coreutils
from pyrevit import HOST_APP
from pyrevit import revit, DB
from itertools import chain
from itertools import islice

####################################################################################################################

def format_length(length_value, doc = None):
    doc = doc or HOST_APP.doc
    return DB.UnitFormatUtils.Format(units = doc.GetUnits(), unitType = DB.UnitType.UT_Length, value = length_value, maxAccuracy = False, forEditing =False)

####################################################################################################################

import itertools
import Autodesk.Revit.DB as DB
from  Autodesk.Revit.DB import FilteredElementCollector, BuiltInCategory, BuiltInParameter, Transaction, TransactionGroup, Workset, SpatialElement
from Autodesk.Revit.DB import FilteredWorksetCollector, WorksetKind, Element

doc = __revit__.ActiveUIDocument.Document
uidoc = __revit__.ActiveUIDocument

####################################################################################################################

# Select Excel File from Folder

logger = script.get_logger()
# if__name__ == '__main__':

source_file = forms.pick_file(file_ext='xlsx')

# Reading an excel file using Python 
import xlrd 
from xlrd import open_workbook 

# Give the location of the file 
loc = source_file
  
# To open Workbook 
wb = xlrd.open_workbook(loc) 
sheet = wb.sheet_by_index(0) 

#####################################################################################################################
# Read Excel Parameters and Family Category

identifier_param_to_read = sheet.col_values(5)

# Column values in Excel File
function_param_to_read = sheet.col_values(5)
door_Leaf_Number = sheet.col_values(6)
door_equal_leaves = sheet.col_values(7)
door_Leaf_Width = sheet.col_values(8)
door_Leaf_Height = sheet.col_values(9)
door_Undercut = sheet.col_values(10)
door_fire_rating = sheet.col_values(22)
door_host_fire_rating = sheet.col_values(21)
door_acoustics_rating = sheet.col_values(23)
door_Leaf_Material = sheet.col_values(12)
door_Frame_Material = sheet.col_values(16)
door_Leaf_Face_Finish = sheet.col_values(14)
door_Frame_Face_Finish = sheet.col_values(18)
door_grills = sheet.col_values(24)

door_function_dictionary = {z[0]:list(z[1:]) for z in zip(function_param_to_read, door_Leaf_Number, door_equal_leaves, door_Leaf_Width, door_Leaf_Height, door_Undercut, door_fire_rating, door_host_fire_rating, door_acoustics_rating, door_Leaf_Material, door_Leaf_Face_Finish, door_Frame_Material, door_Frame_Face_Finish, door_grills)}
# print(door_function_dictionary)

####################################################################################################################
# Function to acquire all elements of category & get parameter value by name 

def all_elements_of_category(category):
	return FilteredElementCollector(doc).OfCategory(category).WhereElementIsNotElementType().ToElements()

####################################################################################################################
# Function to read Shared Parameter values as String

def shared_parameter_values(elems, parameter_name):
    elem_param_values = []
    for e in elems:
        for param in e.Parameters:
            if param.IsShared and param.Definition.Name == parameter_name:
                paramValue = e.get_Parameter(param.GUID)
                elem_param_values.append(paramValue.AsString())
    return elem_param_values

####################################################################################################################
# Master Door Information
# Removed Glazed doors as they donot have sufficient information

doors = all_elements_of_category(BuiltInCategory.OST_Doors)
# print(doors)
door_comments = [d.get_Parameter(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS).AsString() for d in doors]
# print(door_comments)

exclusions = ["ROLLING SHUTTER", "ACCESS PANEL", "CLOSET DOOR", "Glass door" , "Curtain wall door"]

indices_for_non_glazed_doors = [i for i, x in enumerate(door_comments) if x not in exclusions]
# print(indices_for_non_glazed_doors)

####################################################################################################################
# Master Door Information- after filtering Doors

doors = [doors[i] for i in indices_for_non_glazed_doors]
# print(doors)

door_numbers = [d.get_Parameter(BuiltInParameter.DOOR_NUMBER).AsString() for d in doors]
# print(door_numbers)

# Getting Room Numbers in Doors 
door_room_numbers = shared_parameter_values(doors, 'Room_Number')
# print(door_room_numbers)

indices_of_doors_with_missing_door_room_numbers = [i for i, x in enumerate(door_room_numbers) if x == None]
door_numbers_with_missing_door_room_numbers = [door_numbers[i] for i in indices_of_doors_with_missing_door_room_numbers]

indices_of_doors_with_door_room_numbers = [i for i, x in enumerate(door_room_numbers) if x != None]
doors = [doors[i] for i in indices_of_doors_with_door_room_numbers]
door_numbers = [door_numbers[i] for i in indices_of_doors_with_door_room_numbers]
door_room_numbers = [door_room_numbers[i] for i in indices_of_doors_with_door_room_numbers]

# Getting Room Names in Doors 
door_room_names = shared_parameter_values(doors, 'Room_Name')
indices_of_doors_with_missing_door_room_names = [i for i, x in enumerate(door_room_names) if x == None]
door_numbers_with_missing_door_room_names = [doors[i] for i in indices_of_doors_with_missing_door_room_names]


indices_of_doors_with_door_room_names = [i for i, x in enumerate(door_room_names) if x != None]
doors = [doors[i] for i in indices_of_doors_with_door_room_names]
door_numbers = [door_numbers[i] for i in indices_of_doors_with_door_room_names]
door_room_numbers = [door_room_numbers[i] for i in indices_of_doors_with_door_room_names]
door_room_names = [door_room_names[i] for i in indices_of_doors_with_door_room_names]
# print(door_numbers, door_room_numbers, door_room_names)

####################################################################################################################

# Phase dependent Door properties

def troom_froom_name_for_doors(doors_to_acquire = doors):
    phases = doc.Phases
    phase = phases[phases.Size - 1]
    troom = []
    froom = []

    for d in doors_to_acquire:
        temp = []
        try:
            temp = d.FromRoom[phase]
            froom.append(temp)
        except:
            temp = 'fail'
            froom.append(temp)
        temp1 = []
        try:
            temp1 = d.ToRoom[phase]
            troom.append(temp1)
        except:
            temp1 = 'fail'
            troom.append(temp1)

    filtered_from_rooms_index = [i for i, x in enumerate(froom) if x != None]
    # print(filtered_from_rooms_index)
    filtered_from_rooms = [froom[i] for i in filtered_from_rooms_index]
    # print(filtered_from_rooms)
    FromRoomName = [[r.get_Parameter(BuiltInParameter.ROOM_NAME).AsString() for r in filtered_from_rooms]]
    # print(FromRoomName)
    iter_flat_FromRoomName_list =  itertools.chain.from_iterable
    flat_FromRoomName_list = list(iter_flat_FromRoomName_list(FromRoomName))
    # print(flat_FromRoomName_list)
    froom_list_length = (len(froom))
    from_room_name_list = ["None"] * froom_list_length
    # print(from_room_name_list)
    # print(len(from_room_name_list))
    for (index, replacements) in zip(filtered_from_rooms_index,flat_FromRoomName_list):
        from_room_name_list[index] = replacements
    # print(from_room_name_list)

    filtered_to_rooms_index = [i for i, x in enumerate(troom) if x != None]
    filtered_to_rooms = [troom[i] for i in filtered_to_rooms_index]
    # print(filtered_to_rooms)
    ToRoomName = [[r.get_Parameter(BuiltInParameter.ROOM_NAME).AsString() for r in filtered_to_rooms]]
    # print(ToRoomName)
    iter_flat_ToRoomName_list =  itertools.chain.from_iterable
    flat_ToRoomName_list = list(iter_flat_ToRoomName_list(ToRoomName))
    # print(flat_ToRoomName_list)
    troom_list_length = (len(troom))
    to_room_name_list = ["None"] * troom_list_length
    # print(to_room_name_list)
    # print(len(to_room_name_list))
    for (index, replacements) in zip(filtered_to_rooms_index,flat_ToRoomName_list):
        to_room_name_list[index] = replacements
    # print(to_room_name_list)
    return(to_room_name_list, from_room_name_list)

####################################################################################################################
# Getting To Room & From Room Door Info
door_to_from_name_list = troom_froom_name_for_doors(doors)
    
door_to_room_name_list = door_to_from_name_list[0]
door_from_room_name_list = door_to_from_name_list[1]
# print(door_to_from_name_list)

####################################################################################################################
# Function for checking Family Type Door Parameters(AsInteger, AsDouble, AsString)

def all_elements_with_type_parameter_AsInteger(sample_doors, door_family_type_parameter):
    door_family_test = []
    door_family_param = []
    
    for d in sample_doors:
        door_type = d.Symbol
        door_family_param = door_type.LookupParameter(door_family_type_parameter)
        temp = []
        if door_family_param:
            temp = door_family_param.AsInteger()
            door_family_test.append(temp)
        else:
            temp = 'fail'
            door_family_test.append(temp)
    return door_family_test

def all_elements_with_type_parameter_AsDouble(sample_doors, door_family_type_parameter):
    door_family_test = []
    door_family_param = []
    
    for d in sample_doors:
        door_type = d.Symbol
        door_family_param = door_type.LookupParameter(door_family_type_parameter)
        temp = []
        if door_family_param:
            temp = door_family_param.AsDouble()
            door_family_test.append(temp)
        else:
            temp = 'fail'
            door_family_test.append(temp)
    return door_family_test

def all_elements_with_type_parameter_AsString(sample_doors, door_family_type_parameter):
    door_family_test = []
    door_family_param = []
    
    for d in sample_doors:
        door_type = d.Symbol
        door_family_param = door_type.LookupParameter(door_family_type_parameter)
        temp = []
        if door_family_param:
            temp = door_family_param.AsString()
            door_family_test.append(temp)
        else:
            temp = 'fail'
            door_family_test.append(temp)
    return door_family_test

# Getting failed elements (Doors & Door Numbers)-using value from previous function for Family type test
def doors_with_family_param_failure(door_family_test,sample_doors, sample_door_numbers):
    index_of_doors_with_family_param_failure = [i for i, x in enumerate(door_family_test) if x == 'fail']
    doors_with_family_test_issues = [sample_doors[i] for i in index_of_doors_with_family_param_failure]
    door_numbers_with_family_test_issues = [sample_door_numbers[i] for i in index_of_doors_with_family_param_failure]        
    return (doors_with_family_test_issues, door_numbers_with_family_test_issues)
 
# Getting passed elements (Doors & Door Numbers)
def doors_with_family_param_pass(door_family_test,sample_doors, sample_door_numbers):
    index_of_doors_with_family_param_pass = [i for i, x in enumerate(door_family_test) if x != 'fail']
    doors_with_family_test_pass = [sample_doors[i] for i in index_of_doors_with_family_param_pass]
    door_numbers_with_family_test_pass = [sample_door_numbers[i] for i in index_of_doors_with_family_param_pass]
    return (doors_with_family_test_pass, door_numbers_with_family_test_pass)

####################################################################################################################
# Function for unit conversion

def unit_conversion(revit_value_in_feet):
    resultant_value_from_revit = [float(x) for x in revit_value_in_feet]
    resultant_value_unit_conversion = [format_length(x) for x in resultant_value_from_revit]
    resultant_value_converted_to_mm = [int(x) for x in resultant_value_unit_conversion]
    return(resultant_value_converted_to_mm)

####################################################################################################################
# Extract Shared Parameter values, returns index of valid and None values

def elem_param_values_test(elems, parameter_name):
    elem_param_values = shared_parameter_values(elems,parameter_name)
    elem_param_None_index = [i for i, x in enumerate(elem_param_values) if x == None]
    elem_param_valid_index = [ i for i, x in enumerate(elem_param_values) if x != None]
    return (elem_param_values, elem_param_valid_index, elem_param_None_index)

####################################################################################################################

######### IMPORTANT ################## IMPORTANT ###################### IMPORTANT ##################################
# Prior to running any scripts, please ensure Doors to have functions using below
 
door_function_values_with_index = elem_param_values_test(doors, "Room_Function")
# print(door_function_values_with_index)
door_function_values = door_function_values_with_index[0]
index_for_doors_with_functions_assigned = door_function_values_with_index[1]
index_for_doors_with_no_functions_assigned = door_function_values_with_index[2]

filtered_door_function_values = [door_function_values[i] for i in index_for_doors_with_functions_assigned]
# print(filtered_door_function_values)

doors_with_no_functions_assigned = [doors[i] for i in index_for_doors_with_no_functions_assigned]

doors_with_functions = [doors[i] for i in index_for_doors_with_functions_assigned]
door_numbers_with_functions = [door_numbers[i] for i in index_for_doors_with_functions_assigned]
door_room_numbers_with_functions = [door_room_numbers[i] for i in index_for_doors_with_functions_assigned]
door_room_names_with_functions = [door_room_names[i] for i in index_for_doors_with_functions_assigned]
door_to_room_names_with_functions = [door_to_room_name_list[i] for i in index_for_doors_with_functions_assigned]
door_from_room_names_with_functions = [door_from_room_name_list[i] for i in index_for_doors_with_functions_assigned]

door_function_values_invalid = list((set(door_function_values).difference(identifier_param_to_read)))
index_of_invalid_door_functions = []    
for i in range(len(filtered_door_function_values)):
    if filtered_door_function_values[i] in door_function_values_invalid:
        index_of_invalid_door_functions.append(i)
# print(index_of_invalid_door_functions)  

doors_with_invalid_functions = [doors_with_functions[i] for i in index_of_invalid_door_functions]

set_index_of_invalid_door_functions = set(index_of_invalid_door_functions)
doors_with_valid_functions = [ e for i, e in enumerate(doors_with_functions) if i not in set_index_of_invalid_door_functions]
door_numbers_with_valid_functions = [ e for i, e in enumerate(door_numbers_with_functions) if i not in set_index_of_invalid_door_functions]
door_room_numbers_with_valid_functions = [ e for i, e in enumerate(door_room_numbers_with_functions) if i not in set_index_of_invalid_door_functions]
door_room_names_with_valid_functions = [ e for i, e in enumerate(door_room_names_with_functions) if i not in set_index_of_invalid_door_functions]
door_to_room_names_with_valid_functions = [ e for i, e in enumerate(door_to_room_names_with_functions) if i not in set_index_of_invalid_door_functions]
door_from_room_names_with_valid_functions = [ e for i, e in enumerate(door_from_room_names_with_functions) if i not in set_index_of_invalid_door_functions]
# print(door_numbers_with_valid_functions)
filtered_door_function_valid_values = [e for i, e in enumerate(filtered_door_function_values) if i not in set_index_of_invalid_door_functions]

####################################################################################################################
####################################################################################################################

def mismatch_index_for_door_parameters(values_filtered_from_dictionary,test_to_compare_door_dimensions):
    y = 0
    mismatch_index_for_door_parameter_to_assess = []
    for x in values_filtered_from_dictionary:
        if x != test_to_compare_door_dimensions[y]:
            mismatch_index_for_door_parameter_to_assess.append(y)
        y = y + 1
    return(mismatch_index_for_door_parameter_to_assess)

####################################################################################################################
####################################################################################################################

# Door Leaf Number

test_for_doors_with_leaves = all_elements_with_type_parameter_AsInteger(doors_with_valid_functions, 'Leaf_Number')
# print(test_for_doors_with_leaves)
test_for_doors_with_leaves = [float(x) for x in test_for_doors_with_leaves]
values_from_dict_leaf_number = [door_function_dictionary[x][0] for x in filtered_door_function_valid_values]     # value column index from dictionary for the key list
mismatch_index_for_door_leaf_number = mismatch_index_for_door_parameters(values_from_dict_leaf_number, test_for_doors_with_leaves)
# print(mismatch_index_for_door_leaf_number)

set_index_of_mismatch_door_leaf_number = set(mismatch_index_for_door_leaf_number)
doors_with_valid_leaf_number = [ e for i, e in enumerate(doors_with_valid_functions) if i not in set_index_of_mismatch_door_leaf_number]
door_numbers_with_valid_leaf_number = [ e for i, e in enumerate(door_numbers_with_valid_functions) if i not in set_index_of_mismatch_door_leaf_number]
door_room_numbers_with_valid_leaf_number = [ e for i, e in enumerate(door_room_numbers_with_valid_functions) if i not in set_index_of_mismatch_door_leaf_number]
door_room_names_with_valid_leaf_number = [ e for i, e in enumerate(door_room_names_with_valid_functions) if i not in set_index_of_mismatch_door_leaf_number]
door_to_room_names_with_valid_leaf_number = [ e for i, e in enumerate(door_to_room_names_with_valid_functions) if i not in set_index_of_mismatch_door_leaf_number]
door_from_room_names_with_valid_leaf_number = [ e for i, e in enumerate(door_from_room_names_with_valid_functions) if i not in set_index_of_mismatch_door_leaf_number]
# print(door_numbers_with_valid_leaf_number)
filtered_door_leaf_valid_values = [e for i, e in enumerate(test_for_doors_with_leaves) if i not in set_index_of_mismatch_door_leaf_number]

####################################################################################################################
# Door Equal/Unequal Leaves

# Double Doors

index_of_doors_with_double_leaves = [ i for i, x in enumerate(filtered_door_leaf_valid_values) if x == 2]
doors_with_double_leaves = [doors_with_valid_leaf_number[i] for i in index_of_doors_with_double_leaves]
door_numbers_with_double_leaves = [door_numbers_with_valid_leaf_number[i] for i in index_of_doors_with_double_leaves]
# print(door_numbers_with_double_leaves)

####################################################################################################################
# Double Equal/Unequal Leaf Doors

test_for_double_doors_equal_unequal = all_elements_with_type_parameter_AsDouble(doors_with_double_leaves, 'Side Panel Width')
# print(test_for_double_doors_equal_unequal)

####################################################################################################################
# Double Unequal Leaf Doors

test_for_double_doors_unequal_pass = doors_with_family_param_pass(test_for_double_doors_equal_unequal,doors_with_double_leaves, door_numbers_with_double_leaves)
# print(test_for_double_doors_unequal_pass)

double_doors_with_unequal_leaves = test_for_double_doors_unequal_pass[0]
double_door_numbers_with_unequal_leaves = test_for_double_doors_unequal_pass[1]

test_for_double_doors_unequal = all_elements_with_type_parameter_AsInteger(double_doors_with_unequal_leaves, 'Equal_Leaves')
# print(test_for_double_doors_unequal)

door_function_for_doors_with_double_leaves_unequal = elem_param_values_test(double_doors_with_unequal_leaves, "Room_Function")
# print(door_function_for_doors_with_double_leaves_unequal)
door_function_values_for_doors_with_double_leaves_unequal = door_function_for_doors_with_double_leaves_unequal[0]

values_from_dict_equal_unequal_leaves = [door_function_dictionary[x][1] for x in door_function_values_for_doors_with_double_leaves_unequal]  
mismatch_index_for_door_with_unequal_leaves = mismatch_index_for_door_parameters(values_from_dict_equal_unequal_leaves, test_for_double_doors_unequal)

set_index_of_mismatch_door_with_unequal_leaves = set(mismatch_index_for_door_with_unequal_leaves)
doors_with_valid_unequal_leaves = [ e for i, e in enumerate(double_doors_with_unequal_leaves) if i not in set_index_of_mismatch_door_with_unequal_leaves]
door_numbers_with_valid_unequal_leaves = [ e for i, e in enumerate(double_door_numbers_with_unequal_leaves) if i not in set_index_of_mismatch_door_with_unequal_leaves]
# print(door_numbers_with_valid_unequal_leaves)

####################################################################################################################
# Double Equal Leaf Doors

test_for_double_doors_equal_leaves = doors_with_family_param_failure(test_for_double_doors_equal_unequal,doors_with_double_leaves, door_numbers_with_double_leaves)
# print(test_for_double_doors_equal_leaves)

double_doors_with_equal_leaves = test_for_double_doors_equal_leaves[0]
double_door_numbers_with_equal_leaves = test_for_double_doors_equal_leaves[1]

test_for_double_doors_equal = all_elements_with_type_parameter_AsInteger(double_doors_with_equal_leaves, 'Equal_Leaves')
# print(test_for_double_doors_equal)

door_function_for_doors_with_double_equal_leaves = elem_param_values_test(double_doors_with_equal_leaves, "Room_Function")
# print(door_function_for_doors_with_double_equal_leaves)
door_function_values_for_doors_with_double_equal_leaves = door_function_for_doors_with_double_equal_leaves[0]
values_from_dict_equal_leaves = [door_function_dictionary[x][1] for x in door_function_values_for_doors_with_double_equal_leaves]  
# print(values_from_dict_equal_leaves)

mismatch_index_for_door_with_equal_leaves = mismatch_index_for_door_parameters(values_from_dict_equal_leaves, test_for_double_doors_equal)
# print(mismatch_index_for_door_with_equal_leaves)

set_index_of_mismatch_door_with_equal_leaves = set(mismatch_index_for_door_with_equal_leaves)
doors_with_valid_equal_leaves = [ e for i, e in enumerate(double_doors_with_equal_leaves) if i not in set_index_of_mismatch_door_with_equal_leaves]
door_numbers_with_valid_equal_leaves = [ e for i, e in enumerate(double_door_numbers_with_equal_leaves) if i not in set_index_of_mismatch_door_with_equal_leaves]
# print(door_numbers_with_valid_equal_leaves)

####################################################################################################################
# Single Leaf Doors

index_of_doors_with_single_leaf = [ i for i, x in enumerate(filtered_door_leaf_valid_values) if x == 1]
doors_with_single_leaf = [doors_with_valid_leaf_number[i] for i in index_of_doors_with_single_leaf]
door_numbers_with_single_leaf = [door_numbers_with_valid_leaf_number[i] for i in index_of_doors_with_single_leaf]
# print(door_numbers_with_single_leaf)

test_for_single_doors_unequal = all_elements_with_type_parameter_AsInteger(doors_with_single_leaf, 'Equal_Leaves')
# print(test_for_single_doors_unequal)

door_function_for_doors_with_single_leaf_unequal = elem_param_values_test(doors_with_single_leaf, "Room_Function")
# print(door_function_for_doors_with_single_unequal)
door_function_values_for_doors_with_single_unequal = door_function_for_doors_with_single_leaf_unequal[0]
# print(door_function_values_for_doors_with_single_unequal)

values_from_dict_single_equal_unequal_leaf = [door_function_dictionary[x][1] for x in door_function_values_for_doors_with_single_unequal]  
# print(values_from_dict_single_equal_unequal_leaf)

mismatch_index_for_door_with_single_equal_unequal_leaf = mismatch_index_for_door_parameters(values_from_dict_single_equal_unequal_leaf, test_for_single_doors_unequal)
# print(mismatch_index_for_door_with_single_equal_unequal_leaf)

set_index_of_mismatch_door_with_single_equal_unequal_leaf = set(mismatch_index_for_door_with_single_equal_unequal_leaf)
doors_with_valid_single_equal_leaf = [ e for i, e in enumerate(doors_with_single_leaf) if i not in set_index_of_mismatch_door_with_single_equal_unequal_leaf]
door_numbers_with_valid_single_equal_leaf = [ e for i, e in enumerate(door_numbers_with_single_leaf) if i not in set_index_of_mismatch_door_with_single_equal_unequal_leaf]
# print(door_numbers_with_valid_single_equal_leaf)

####################################################################################################################
###################################################################################################################
# Index of mismatching door sizes

# Equal Doors

def test_for_door_dimensions(filtered_doors, param, sheet_col_val):
    test_for_door_dimensions = all_elements_with_type_parameter_AsDouble(filtered_doors, param)
    test_for_door_dimension_unit_convert = unit_conversion(test_for_door_dimensions)
    #print(test_for_door_dimension_unit_convert)
    
    door_function_for_doors_with_tested_dimensions = elem_param_values_test(filtered_doors, 'Room_Function')
    door_function_values_for_doors_with_tested_dimensions = door_function_for_doors_with_tested_dimensions[0]
    # print(door_function_values_for_doors_with_tested_dimensions)

    values_from_dict_for_filtered_doors = [door_function_dictionary[x][sheet_col_val] for x in door_function_values_for_doors_with_tested_dimensions]
    values_from_dict_for_filtered_doors = [int(x) for x in values_from_dict_for_filtered_doors]

    mismatch_index_values_for_door_parameters_in_assessment = mismatch_index_for_door_parameters(values_from_dict_for_filtered_doors, test_for_door_dimension_unit_convert)
    return(mismatch_index_values_for_door_parameters_in_assessment)        

# Unequal Doors- Widths

def test_for_unequal_door_dimensions(filtered_doors, param, sheet_col_val):
    test_for_door_dimensions = all_elements_with_type_parameter_AsDouble(filtered_doors, param)
    test_for_door_dimension_unit_convert = unit_conversion(test_for_door_dimensions)
    #print(test_for_door_dimension_unit_convert)
    
    door_function_for_doors_with_tested_dimensions = elem_param_values_test(filtered_doors, 'Room_Function')
    door_function_values_for_doors_with_tested_dimensions = door_function_for_doors_with_tested_dimensions[0]
    # print(door_function_values_for_doors_with_tested_dimensions)

    values_from_dict_for_filtered_doors = [door_function_dictionary[x][sheet_col_val] for x in door_function_values_for_doors_with_tested_dimensions]
    split_val_dict = [x.split("+") for x in values_from_dict_for_filtered_doors]
    
    main_panel_width = [panel[0] for panel in split_val_dict]
    side_panel_width = [panel[1] for panel in split_val_dict]
    
    if param == 'Main Panel Width':
        values_to_assess = main_panel_width
    else:
        values_to_assess = side_panel_width
 
    values_to_asess = [int(x) for x in values_to_assess]

    y = 0
    mismatch_index_for_unequal_door_parameter_to_assess = []
    for x in values_to_asess:
        if x != test_for_door_dimension_unit_convert [y]:
            mismatch_index_for_unequal_door_parameter_to_assess.append(y)
        y = y + 1
    return(mismatch_index_for_unequal_door_parameter_to_assess)
   
    mismatch_index_values_for_door_parameters_in_assessment = mismatch_index_for_unequal_door_parameters(values_to_assess, test_for_door_dimension_unit_convert)
    return(mismatch_index_values_for_door_parameters_in_assessment)       

###################################################################################################################
####################################################################################################################
# Leaf Widths

# Single Leaf Doors

test_index_for_single_doors_width = test_for_door_dimensions(doors_with_valid_single_equal_leaf, 'Leaf_Width', 2)
# print(test_index_for_single_doors_width)
set_index_of_mismatch_doors_with_single_leaf_width = set(test_index_for_single_doors_width)
doors_with_valid_single_leaf_width = [ e for i, e in enumerate(doors_with_valid_single_equal_leaf) if i not in set_index_of_mismatch_doors_with_single_leaf_width]
door_numbers_with_valid_single_leaf_width = [ e for i, e in enumerate(doors_with_valid_single_equal_leaf) if i not in set_index_of_mismatch_doors_with_single_leaf_width]

# Double Equal Leaf Doors

test_index_for_double_equal_doors_width = test_for_door_dimensions(doors_with_valid_equal_leaves, 'Leaf_Width', 2)
# print(test_index_for_double_equal_doors_width)
set_index_of_mismatch_doors_with_double_equal_leaves_width = set(test_index_for_double_equal_doors_width)
doors_with_valid_double_equal_leaves_width = [ e for i, e in enumerate(doors_with_valid_equal_leaves) if i not in set_index_of_mismatch_doors_with_double_equal_leaves_width]
door_numbers_with_valid_double_equal_leaves_width = [ e for i, e in enumerate(doors_with_valid_equal_leaves) if i not in set_index_of_mismatch_doors_with_double_equal_leaves_width]

# Double Unequal Leaf Doors

# Main Panel Width

test_index_for_double_unequal_doors_main_panel_width = test_for_unequal_door_dimensions(doors_with_valid_unequal_leaves, 'Main Panel Width', 2)
# print(test_index_for_double_unequal_doors_main_panel_width)
set_index_of_mismatch_doors_with_unequal_main_panel_width = set(test_index_for_double_unequal_doors_main_panel_width)
doors_with_valid_unequal_leaves_main_panel_width = [ e for i, e in enumerate(doors_with_valid_equal_leaves) if i not in set_index_of_mismatch_doors_with_unequal_main_panel_width]
door_numbers_with_valid_unequal_leaves_main_panel_width = [ e for i, e in enumerate(door_numbers_with_valid_unequal_leaves) if i not in set_index_of_mismatch_doors_with_unequal_main_panel_width]

# Side Panel Width

test_index_for_double_unequal_doors_side_panel_width = test_for_unequal_door_dimensions(doors_with_valid_unequal_leaves, 'Side Panel Width', 2)
# print(test_index_for_double_unequal_doors_side_panel_width)
set_index_of_mismatch_doors_with_unequal_side_panel_width = set(test_index_for_double_unequal_doors_side_panel_width)
doors_with_valid_unequal_leaves_side_panel_width = [ e for i, e in enumerate(doors_with_valid_equal_leaves) if i not in set_index_of_mismatch_doors_with_unequal_side_panel_width]
door_numbers_with_valid_unequal_leaves_side_panel_width = [ e for i, e in enumerate(door_numbers_with_valid_unequal_leaves) if i not in set_index_of_mismatch_doors_with_unequal_side_panel_width]

####################################################################################################################
####################################################################################################################
# Leaf Height

# Single Leaf Doors

test_index_for_single_doors_height = test_for_door_dimensions(doors_with_valid_single_equal_leaf, 'Leaf_Height', 3)
# print(test_for_single_doors_height_unit_convert)

set_index_of_mismatch_doors_with_single_leaf_height = set(test_index_for_single_doors_height)
doors_with_valid_single_leaf_height = [ e for i, e in enumerate(doors_with_valid_single_equal_leaf) if i not in set_index_of_mismatch_doors_with_single_leaf_height]
door_numbers_with_valid_single_leaf_height = [ e for i, e in enumerate(doors_with_valid_single_equal_leaf) if i not in set_index_of_mismatch_doors_with_single_leaf_height]

####################################################################################################################
# Double Equal Leaf Doors

test_index_for_double_equal_doors_height = test_for_door_dimensions(doors_with_valid_equal_leaves, 'Leaf_Height', 3)
# print(test_index_for_double_equal_doors_height_unit_convert)

set_index_of_mismatch_doors_with_double_equal_leaves_height = set(test_index_for_double_equal_doors_height)
doors_with_valid_double_equal_leaves_height = [ e for i, e in enumerate(doors_with_valid_equal_leaves) if i not in set_index_of_mismatch_doors_with_double_equal_leaves_height]
door_numbers_with_valid_double_equal_leaves_height = [ e for i, e in enumerate(doors_with_valid_equal_leaves) if i not in set_index_of_mismatch_doors_with_double_equal_leaves_height]

####################################################################################################################
# Double Unqual Leaf Doors

test_index_for_double_unequal_doors_height = test_for_door_dimensions(doors_with_valid_unequal_leaves, 'Leaf_Height', 3)
# print(test_index_for_double_unequal_doors_height_unit_convert)

set_index_of_mismatch_doors_with_double_unequal_leaves_height = set(test_index_for_double_unequal_doors_height)
doors_with_valid_double_unequal_leaves_height = [ e for i, e in enumerate(doors_with_valid_unequal_leaves) if i not in set_index_of_mismatch_doors_with_double_unequal_leaves_height]
door_numbers_with_valid_double_equal_leaves_height = [ e for i, e in enumerate(doors_with_valid_unequal_leaves) if i not in set_index_of_mismatch_doors_with_double_unequal_leaves_height]

####################################################################################################################
####################################################################################################################
# Door Fire Rating
# Door Leaf Height, Width, Equal/Unequal Single don't matter for Door Fire Rating so directly accessing doors after fixing door numbers, room names/numbers, etc.

fire_rating_for_doors_with_index = elem_param_values_test(doors_with_valid_functions, 'Fire_Rating')
# print(fire_rating_for_doors_with_index)

fire_rating_values = fire_rating_for_doors_with_index[0]
index_for_doors_with_fire_rating_assigned = fire_rating_for_doors_with_index[1]
index_for_doors_with_no_fire_rating_assigned = fire_rating_for_doors_with_index[2]

filtered_door_fire_rating_values = [fire_rating_values[i] for i in index_for_doors_with_fire_rating_assigned]
filtered_door_fire_rating_values = [int(x) for x in filtered_door_fire_rating_values]
# print(filtered_door_fire_rating_values)

####################################################################################################################
# Doors with no Fire rating assigned

doors_with_no_fire_rating_assigned = [doors_with_valid_functions[i] for i in index_for_doors_with_no_fire_rating_assigned]

doors_with_fire_rating = [doors_with_valid_functions[i] for i in index_for_doors_with_fire_rating_assigned]
door_numbers_with_fire_rating = [door_numbers_with_valid_functions[i] for i in index_for_doors_with_fire_rating_assigned]

door_function_for_doors_with_fire_rating = elem_param_values_test(doors_with_fire_rating, "Room_Function")
# print(door_function_for_doors_with_fire_rating)
door_function_values_for_doors_with_fire_rating = door_function_for_doors_with_fire_rating[0]
# print(door_function_values_for_doors_with_fire_rating)
values_from_dict_doors_with_fire_rating = [door_function_dictionary[x][5] for x in door_function_values_for_doors_with_fire_rating]
values_from_dict_doors_with_fire_rating = [int(x) for x in values_from_dict_doors_with_fire_rating]
# print(values_from_dict_doors_with_fire_rating)

####################################################################################################################
# Doors with mismatch Fire rating assigned

mismatch_index_for_doors_with_fire_rating = mismatch_index_for_door_parameters(values_from_dict_doors_with_fire_rating, filtered_door_fire_rating_values)
# print(mismatch_index_for_doors_with_fire_rating)

set_index_of_mismatch_door_with_fire_rating = set(mismatch_index_for_doors_with_fire_rating)
doors_with_invalid_fire_rating = [e for i, e in enumerate(doors_with_fire_rating) if i in set_index_of_mismatch_door_with_fire_rating]

####################################################################################################################
# Doors with valid matching Fire rating assigned

doors_with_valid_fire_rating = [e for i, e in enumerate(doors_with_fire_rating) if i not in set_index_of_mismatch_door_with_fire_rating]
door_numbers_with_valid_fire_rating = [e for i, e in enumerate(door_numbers_with_fire_rating) if i not in set_index_of_mismatch_door_with_fire_rating]
# print(door_numbers_with_valid_fire_rating)

wall_host_for_fire_doors = []
for d in doors_with_valid_fire_rating :
    temp = []
    wallId = d.Host.Id
        
    temp = doc.GetElement(wallId)
    wall_host_for_fire_doors.append(temp)
# print(wall_host_for_fire_doors)

wall_fire_rating = []
for w in wall_host_for_fire_doors:
    for param in w.Parameters:
        if param.IsShared and param.Definition.Name == 'Fire_Rating':
            paramValue = w.get_Parameter(param.GUID)
            wall_fire_rating.append(paramValue.AsString())
  
# print(wall_fire_rating)

errors = [None, ""]

####################################################################################################################
# Doors with Fire Rating but no Wall Rating

index_of_fire_rated_doors_with_no_wall_fire_rating = [i for i, x in enumerate(wall_fire_rating) if x in errors]
doors_with_fire_rating_but_no_wall_fire_rating = [doors_with_valid_fire_rating[i] for i in index_of_fire_rated_doors_with_no_wall_fire_rating]
# print(doors_with_fire_rating_but_no_wall_fire_rating)

index_of_fire_rated_doors_with_wall_fire_rating = [i for i, x in enumerate(wall_fire_rating) if x not in errors]
fire_rated_walls_with_doors = [wall_host_for_fire_doors[i] for i in index_of_fire_rated_doors_with_wall_fire_rating]
fire_rated_wall_ratings_for_doors_with_fire_ratings = [wall_fire_rating[i] for i in index_of_fire_rated_doors_with_wall_fire_rating]
fire_rated_wall_ratings_for_doors_with_fire_ratings = [int(x) for x in fire_rated_wall_ratings_for_doors_with_fire_ratings]
# print(fire_rated_wall_ratings_for_doors_with_fire_ratings)

doors_with_fire_rating_and_wall_rating = [doors_with_valid_fire_rating[i] for i in index_of_fire_rated_doors_with_wall_fire_rating]
door_numbers_with_fire_rating_and_wall_rating = [door_numbers_with_valid_fire_rating[i] for i in index_of_fire_rated_doors_with_wall_fire_rating]
door_fire_rating_values_with_fire_rated_walls = shared_parameter_values(doors_with_fire_rating_and_wall_rating , 'Fire_Rating')
door_fire_rating_values_with_fire_rated_walls = [int(x) for x in door_fire_rating_values_with_fire_rated_walls]
# print(door_fire_rating_values_with_fire_rated_walls)

expected_door_ratings_as_per_wall_fire_ratings = [(0.75 * x) for x in fire_rated_wall_ratings_for_doors_with_fire_ratings]

mismatch_index_for_doors_against_wall_ratings = mismatch_index_for_door_parameters(expected_door_ratings_as_per_wall_fire_ratings, door_fire_rating_values_with_fire_rated_walls)
# print(mismatch_index_for_doors_against_wall_ratings)

set_index_of_mismatch_doors_fire_rating_against_wall_ratings= set(mismatch_index_for_doors_against_wall_ratings)
doors_with_walls_with_invalid_fire_ratings = [e for i, e in enumerate(doors_with_fire_rating_and_wall_rating) if i in set_index_of_mismatch_doors_fire_rating_against_wall_ratings]

doors_with_walls_with_valid_fire_ratings = [e for i, e in enumerate(doors_with_fire_rating_and_wall_rating) if i not in set_index_of_mismatch_doors_fire_rating_against_wall_ratings]
door_numbers_with_walls_with_valid_fire_ratings = [e for i, e in enumerate(door_numbers_with_fire_rating_and_wall_rating) if i not in set_index_of_mismatch_doors_fire_rating_against_wall_ratings]


####################################################################################################################
####################################################################################################################
# Door Acoustic Rating
# Door Leaf Height, Width, Equal/Unequal Single don't matter for Door Acoustic Rating so directly accessing doors after fixing door numbers, room names/numbers, etc.

acoustic_rating_for_doors_with_index = elem_param_values_test(doors_with_valid_functions, 'STC_Rating')
# print(acoustic_rating_for_doors_with_index)

acoustic_rating_values = acoustic_rating_for_doors_with_index[0]
index_for_doors_with_acoustic_rating_assigned = acoustic_rating_for_doors_with_index[1]
index_for_doors_with_no_acoustic_rating_assigned = acoustic_rating_for_doors_with_index[2]

filtered_door_acoustic_rating_values = [acoustic_rating_values[i] for i in index_for_doors_with_acoustic_rating_assigned]
filtered_door_acoustic_rating_values = [s.replace(".","") for s in filtered_door_acoustic_rating_values]
filtered_door_acoustic_rating_values = [int(x) for x in filtered_door_acoustic_rating_values]
# print(filtered_door_acoustic_rating_values)

####################################################################################################################
# Doors with no acoustic rating assigned

doors_with_no_acoustic_rating_assigned = [doors_with_valid_functions[i] for i in index_for_doors_with_no_acoustic_rating_assigned]

doors_with_acoustic_rating = [doors_with_valid_functions[i] for i in index_for_doors_with_acoustic_rating_assigned]
door_numbers_with_acoustic_rating = [door_numbers_with_valid_functions[i] for i in index_for_doors_with_acoustic_rating_assigned]

door_function_for_doors_with_acoustic_rating = elem_param_values_test(doors_with_acoustic_rating, "Room_Function")
# print(door_function_for_doors_with_acoustic_rating)
door_function_values_for_doors_with_acoustic_rating = door_function_for_doors_with_acoustic_rating[0]
# print(door_function_values_for_doors_with_acoustic_rating)
values_from_dict_doors_with_acoustic_rating = [door_function_dictionary[x][7] for x in door_function_values_for_doors_with_acoustic_rating]
values_from_dict_doors_with_acoustic_rating = [int(x) for x in values_from_dict_doors_with_acoustic_rating]
# print(values_from_dict_doors_with_acoustic_rating)

####################################################################################################################
# Doors with mismatch Acoustic rating assigned

mismatch_index_for_doors_with_acoustic_rating = mismatch_index_for_door_parameters(values_from_dict_doors_with_acoustic_rating, filtered_door_acoustic_rating_values)
# print(mismatch_index_for_doors_with_acoustic_rating)

set_index_of_mismatch_door_with_acoustic_rating = set(mismatch_index_for_doors_with_acoustic_rating)
doors_with_invalid_acoustic_rating = [e for i, e in enumerate(doors_with_acoustic_rating) if i in set_index_of_mismatch_door_with_acoustic_rating]

####################################################################################################################
# Doors with valid matching Acoustic rating assigned

doors_with_valid_acoustic_rating = [e for i, e in enumerate(doors_with_acoustic_rating) if i not in set_index_of_mismatch_door_with_acoustic_rating]
door_numbers_with_valid_acoustic_rating = [e for i, e in enumerate(door_numbers_with_acoustic_rating) if i not in set_index_of_mismatch_door_with_acoustic_rating]
# print(door_numbers_with_valid_acoustic_rating)

wall_host_for_acoustic_doors = []
for d in doors_with_valid_acoustic_rating :
    temp = []
    wallId = d.Host.Id
        
    temp = doc.GetElement(wallId)
    wall_host_for_acoustic_doors.append(temp)
# print(wall_host_for_acoustic_doors)

wall_acoustic_rating = []
for w in wall_host_for_acoustic_doors:
    for param in w.Parameters:
        if param.IsShared and param.Definition.Name == 'STC_Rating':
            paramValue = w.get_Parameter(param.GUID)
            wall_acoustic_rating.append(paramValue.AsString())
  
# print(wall_acoustic_rating)

errors = [None, ""]

####################################################################################################################
# Doors with Acoustic Rating but no Wall Rating

index_of_acoustic_rated_doors_with_no_wall_acoustic_rating = [i for i, x in enumerate(wall_acoustic_rating) if x in errors]
doors_with_acoustic_rating_but_no_wall_acoustic_rating = [doors_with_valid_acoustic_rating[i] for i in index_of_acoustic_rated_doors_with_no_wall_acoustic_rating]
# print(doors_with_acoustic_rating_but_no_wall_acoustic_rating)

index_of_acoustic_rated_doors_with_wall_acoustic_rating = [i for i, x in enumerate(wall_acoustic_rating) if x not in errors]
acoustic_rated_walls_with_doors = [wall_host_for_acoustic_doors[i] for i in index_of_acoustic_rated_doors_with_wall_acoustic_rating]
acoustic_rated_wall_ratings_for_doors_with_acoustic_ratings = [wall_acoustic_rating[i] for i in index_of_acoustic_rated_doors_with_wall_acoustic_rating]
acoustic_rated_wall_ratings_for_doors_with_acoustic_ratings = [s.replace(".","") for s in acoustic_rated_wall_ratings_for_doors_with_acoustic_ratings]
acoustic_rated_wall_ratings_for_doors_with_acoustic_ratings = [int(x) for x in acoustic_rated_wall_ratings_for_doors_with_acoustic_ratings]
# print(acoustic_rated_wall_ratings_for_doors_with_acoustic_ratings)

doors_with_acoustic_rating_and_wall_rating = [doors_with_valid_acoustic_rating[i] for i in index_of_acoustic_rated_doors_with_wall_acoustic_rating]
door_numbers_with_acoustic_rating_and_wall_rating = [door_numbers_with_valid_acoustic_rating[i] for i in index_of_acoustic_rated_doors_with_wall_acoustic_rating]
door_acoustic_rating_values_with_acoustic_rated_walls = shared_parameter_values(doors_with_acoustic_rating_and_wall_rating , 'STC_Rating')
door_acoustic_rating_values_with_acoustic_rated_walls = [int(x) for x in door_acoustic_rating_values_with_acoustic_rated_walls]
# print(door_acoustic_rating_values_with_acoustic_rated_walls)

expected_door_ratings_as_per_wall_acoustic_ratings = [(x - 20) for x in acoustic_rated_wall_ratings_for_doors_with_acoustic_ratings]

mismatch_index_for_doors_against_wall_ratings = mismatch_index_for_door_parameters(expected_door_ratings_as_per_wall_acoustic_ratings, door_acoustic_rating_values_with_acoustic_rated_walls)
# print(mismatch_index_for_doors_against_wall_ratings)

set_index_of_mismatch_doors_acoustic_rating_against_wall_ratings= set(mismatch_index_for_doors_against_wall_ratings)
doors_with_walls_with_invalid_acoustic_ratings = [e for i, e in enumerate(doors_with_acoustic_rating_and_wall_rating) if i in set_index_of_mismatch_doors_acoustic_rating_against_wall_ratings]

doors_with_walls_with_valid_acoustic_ratings = [e for i, e in enumerate(doors_with_acoustic_rating_and_wall_rating) if i not in set_index_of_mismatch_doors_acoustic_rating_against_wall_ratings]
door_numbers_with_walls_with_valid_acoustic_ratings = [e for i, e in enumerate(door_numbers_with_acoustic_rating_and_wall_rating) if i not in set_index_of_mismatch_doors_acoustic_rating_against_wall_ratings]


####################################################################################################################
####################################################################################################################

def material_and_finishes_mismatch_index(material_or_finish_param, doors_to_check, sheet_col_to_check):
    test_for_doors_with_material_or_finish = all_elements_with_type_parameter_AsString(doors_to_check, material_or_finish_param)
    door_function_for_doors_with_material_or_finish = elem_param_values_test(doors_to_check, 'Room_Function') 
    door_function_values_for_doors_with_material_or_finish = door_function_for_doors_with_material_or_finish[0]
    values_from_dict_material_or_finish = [door_function_dictionary[x][sheet_col_to_check] for x in door_function_values_for_doors_with_material_or_finish]
    values_dict_split_with_multi_elements = [x.split("/") for x in values_from_dict_material_or_finish]
    mismatch_index_for_door_material_or_finish = [ i for i, (a,b) in enumerate(zip(test_for_doors_with_material_or_finish, values_dict_split_with_multi_elements)) if not a in b]
    return(mismatch_index_for_door_material_or_finish)

####################################################################################################################
# Leaf Material

mismatch_index_for_doors_leaf_material = material_and_finishes_mismatch_index('Leaf_Material', doors_with_valid_functions, 8)
set_index_of_mismatch_doors_leaf_material= set(mismatch_index_for_doors_leaf_material)
doors_with_invalid_leaf_material = [e for i, e in enumerate(doors_with_valid_functions) if i in set_index_of_mismatch_doors_leaf_material]

doors_with_valid_leaf_material = [e for i, e in enumerate(doors_with_valid_functions) if i not in set_index_of_mismatch_doors_leaf_material]
door_numbers_with_valid_leaf_material = [e for i, e in enumerate(door_numbers_with_valid_functions) if i not in set_index_of_mismatch_doors_leaf_material]
# print(door_numbers_with_valid_leaf_material)

####################################################################################################################
# Leaf Finish

mismatch_index_for_doors_leaf_finish = material_and_finishes_mismatch_index('Leaf_Face_Finish', doors_with_valid_functions, 9)
set_index_of_mismatch_doors_leaf_finish = set(mismatch_index_for_doors_leaf_finish)
doors_with_invalid_leaf_finish = [e for i, e in enumerate(doors_with_valid_functions) if i in set_index_of_mismatch_doors_leaf_finish]

doors_with_valid_leaf_finish = [e for i, e in enumerate(doors_with_valid_functions) if i not in set_index_of_mismatch_doors_leaf_finish]
door_numbers_with_valid_leaf_finish = [e for i, e in enumerate(door_numbers_with_valid_functions) if i not in set_index_of_mismatch_doors_leaf_finish]
# print(door_numbers_with_valid_leaf_finish)

####################################################################################################################
# Frame Material

mismatch_index_for_doors_frame_material = material_and_finishes_mismatch_index('Frame_Material', doors_with_valid_functions, 10)
set_index_of_mismatch_doors_frame_material= set(mismatch_index_for_doors_frame_material)
doors_with_invalid_frame_material = [e for i, e in enumerate(doors_with_valid_functions) if i in set_index_of_mismatch_doors_frame_material]

doors_with_valid_frame_material = [e for i, e in enumerate(doors_with_valid_functions) if i not in set_index_of_mismatch_doors_frame_material]
door_numbers_with_valid_frame_material = [e for i, e in enumerate(door_numbers_with_valid_functions) if i not in set_index_of_mismatch_doors_frame_material]
# print(door_numbers_with_valid_frame_material)

####################################################################################################################
# Frame Finish

mismatch_index_for_doors_frame_finish = material_and_finishes_mismatch_index('Frame_Face_Finish', doors_with_valid_functions, 11)
set_index_of_mismatch_doors_frame_finish = set(mismatch_index_for_doors_frame_finish)
doors_with_invalid_frame_finish = [e for i, e in enumerate(doors_with_valid_functions) if i in set_index_of_mismatch_doors_frame_finish]

doors_with_valid_frame_finish = [e for i, e in enumerate(doors_with_valid_functions) if i not in set_index_of_mismatch_doors_frame_finish]
door_numbers_with_valid_frame_finish = [e for i, e in enumerate(door_numbers_with_valid_functions) if i not in set_index_of_mismatch_doors_frame_finish]
# print(door_numbers_with_valid_frame_finish)

###################################################################################################################
###################################################################################################################

# Undercut

test_index_for_doors_undercut = test_for_door_dimensions(doors_with_valid_functions, 'Undercut', 4)
# print(test_index_for_doors_undercut)

set_index_of_mismatch_doors_with_undercut = set(test_index_for_doors_undercut)
doors_with_invalid_undercut = [e for i, e in enumerate(doors_with_valid_functions) if i in set_index_of_mismatch_doors_with_undercut]

doors_with_valid_undercut = [e for i, e in enumerate(doors_with_valid_functions) if i not in set_index_of_mismatch_doors_with_undercut]
door_numbers_with_valid_undercut = [e for i, e in enumerate(door_numbers_with_valid_functions) if i not in set_index_of_mismatch_doors_with_undercut]

###################################################################################################################

# Grilled Doors

test_for_leaf_elevation_doors = all_elements_with_type_parameter_AsString(doors_with_valid_functions, 'Leaf_Elevation')
# print(test_for_leaf_elevation_doors)

test_for_leaf_elevation_doors_failure = doors_with_family_param_failure(test_for_leaf_elevation_doors, doors_with_valid_functions, door_numbers_with_valid_functions)
# print(test_for_leaf_elevation_doors_failure )

test_for_leaf_elevation_doors_pass = doors_with_family_param_pass(test_for_leaf_elevation_doors, doors_with_valid_functions, door_numbers_with_valid_functions)
# print(test_for_leaf_elevation_doors_pass)

doors_with_leaf_elevation = test_for_leaf_elevation_doors_pass[0]
door_numbers_with_leaf_elevation = test_for_leaf_elevation_doors_pass[1]

filtered_leaf_elevation_values_for_doors = all_elements_with_type_parameter_AsString(doors_with_leaf_elevation, 'Leaf_Elevation')
# print(filtered_leaf_elevation_values_for_doors)

index_of_doors_with_grilled_doors = [ i for i, x in enumerate(filtered_leaf_elevation_values_for_doors ) if x == 'Grill']
doors_with_grills = [e for i, e in enumerate(doors_with_leaf_elevation) if i in index_of_doors_with_grilled_doors]
door_numbers_with_grills = [e for i, e in enumerate(door_numbers_with_leaf_elevation) if i in index_of_doors_with_grilled_doors]

fire_rating_for_doors_with_grills = shared_parameter_values(doors_with_grills, 'Fire_Rating')
index_of_doors_with_fire_rated_grill_doors = [i for i, x in enumerate(fire_rating_for_doors_with_grills) if x != '0']
# print(index_of_doors_with_fire_rated_grill_doors)

doors_with_grills_and_fire_rated = [e for i, e in enumerate(doors_with_grills) if i in index_of_doors_with_fire_rated_grill_doors]
door_numbers_with_grills_and_fire_rated = [e for i, e in enumerate(door_numbers_with_grills) if i in index_of_doors_with_fire_rated_grill_doors]

acoustic_rating_for_doors_with_grills = shared_parameter_values(doors_with_grills, 'STC_Rating')
index_of_doors_with_acoustic_rated_grill_doors = [i for i, x in enumerate(acoustic_rating_for_doors_with_grills) if x != '0']
# print(index_of_doors_with_acoustic_rated_grill_doors)

doors_with_grills_and_acoustic_rated = [e for i, e in enumerate(doors_with_grills) if i in index_of_doors_with_acoustic_rated_grill_doors]
door_numbers_with_grills_and_acoustic_rated = [e for i, e in enumerate(door_numbers_with_grills) if i in index_of_doors_with_acoustic_rated_grill_doors]


####################################################################################################################
# Generates Output Statement with Door Number, Room Number, Room Name, To Room & From Room in the format 

def output_statement(sample_door_num_with_mismatch, sample_room_num_with_mismatch, sample_room_name_with_mismatch, sample_to_room_with_mismatch, sample_from_room_with_mismatch):
    sample_door_num_with_mismatch = ['Door Number: ' + item + ', ' for item in sample_door_num_with_mismatch]
    sample_room_num_with_mismatch = ['Room Number: ' + item + ', ' for item in sample_room_num_with_mismatch]
    sample_room_name_with_mismatch = ['Room Name: ' + item + ', ' for item in sample_room_name_with_mismatch]
    sample_to_room_with_mismatch = ['To Room: ' + item + ', ' for item in sample_to_room_with_mismatch]
    sample_from_room_with_mismatch = ['From Room: ' + item + '.' for item in sample_from_room_with_mismatch]
    
    sample_test_issues = [i + j + k + l + m for i,j,k,l,m in zip(sample_door_num_with_mismatch, sample_room_num_with_mismatch, sample_room_name_with_mismatch, sample_to_room_with_mismatch, sample_from_room_with_mismatch)]
    for issues in sample_test_issues:
        print(issues)

####################################################################################################################
################### LIST OF ALL DOOR REQUIREMENTS TO VERIFY ########################################################
####################################################################################################################

# All elements of category- UserInput

from rpw.ui.forms import SelectFromList
from rpw.utils.coerce import to_category 

userInputcategory = SelectFromList('Select Parameter to Check', ['01.Door Number against Room Number', '02.Multiple Doors in Single Room', '03.Function', '04.Leaf Number', '05.Single/Equal/Unequal Leaves', '06.Leaf Width', '07.Leaf Height', '08.Fire Rating of Doors and against Wall Fire Ratings', '09.Acoustic Rating of Doors and against Wall Acoustic Ratings','10.Leaf Material & Finishes', '11.Frame Material & Finishes', '12.Undercut', '13.Fire Rated/Acoustically Treated Door with Grill' ])
userInputcategory = str(userInputcategory)

####################################################################################################################

if userInputcategory == '01.Door Number against Room Number':
    
    print('*'*120)
    if len(door_numbers_with_missing_door_room_numbers) == 0:
        print('Door Room Numbers are present in Revit for all included doors')
    else:
        print('The following doors have missing Door Room Numbers.\nPlease add Room Numbers to the doors.\n')
        print(door_numbers_with_missing_door_room_numbers)
    
    
    print('*'*120)
    if len(door_numbers_with_missing_door_room_names) == 0:
        print('Door Room Names are present in Revit for all included doors.')
    else:
        print("The following doors have missing Door Room Names.\nPlease add Room Names to the doors.\n")
        print(door_numbers_with_missing_door_room_names)


    # Creating list of alphabets to verify
    test_list = []
    alpha = 'a'
    for i in range(0,26):
        test_list.append(alpha)
        alpha = chr(ord(alpha) + 1)
    
    # Getting door numbers with last character as alphabet
    last_alpha = [dnm[-1] for dnm in door_numbers]
    # print(last_alpha)    
    
    # Getting index of Doors with alphabets
    door_index_with_alpha = []
    i = 0
    while (i < len(last_alpha)):
        if (test_list.count(last_alpha[i]) > 0):
            door_index_with_alpha.append(i)
        i += 1
    # print(door_index_with_alpha)
    
    # Get all door num with alphabets
    door_num_with_alpha = [door_numbers[i] for i in door_index_with_alpha]
    
    # Removing last character from every string
    door_num_alpha_remove = [a[:-1] for a in door_num_with_alpha]
    # print(door_num_alpha_remove)
    
    # Replacing door numbers with removed alphabets
    door_num_dict = dict(zip(door_index_with_alpha, door_num_alpha_remove))
    door_num_without_alpha_list = [door_num_dict.get(i,j) for i,j in enumerate(door_numbers)]
    # print(door_num_without_alpha_list)
    
    # Checking Door Numbers against Room Numbers
    print('*'*120)
    if door_num_without_alpha_list == door_room_numbers:
       print("All Door numbers match the Room Numbers")
    
    else:
        print("Door numbers do not match the Room Numbers.\n Please find list below to check in Revit Model-\n")
    
    # Boolean comparision of list of Door numbers against Room numbers
    bool_list_compare = (list(i[0] == i[1] for i in zip(door_room_numbers, door_num_without_alpha_list)))   
    # print(bool_list_compare)
    
    # Index of mismatching Door numbers
    index_of_failure_door_num = [i for i, x in enumerate(bool_list_compare) if not x]
    # print(index_of_failure_door_num)
    
    # List of mismatching doors for user
    door_num_with_mismatch_room_num = [door_numbers[i] for i in index_of_failure_door_num]
    room_num_with_mismatch_door_num = [door_room_numbers[i] for i in index_of_failure_door_num]
    room_name_with_mismatch_door_num = [door_room_names[i] for i in index_of_failure_door_num]
    to_room_name_with_mismatch_door_num = [door_to_room_name_list[i] for i in index_of_failure_door_num]
    from_room_name_with_mismatch_door_num = [door_from_room_name_list[i] for i in index_of_failure_door_num]
    
    # List Output for mismatching Door Numbers aginst Room Numbers
    door_num_mismatch_issues = output_statement(door_num_with_mismatch_room_num, room_num_with_mismatch_door_num, room_name_with_mismatch_door_num, to_room_name_with_mismatch_door_num, from_room_name_with_mismatch_door_num)
    print('*'*120)
 
####################################################################################################################

elif userInputcategory == '02.Multiple Doors in Single Room':


    # Creating list of alphabets to verify
    test_list = []
    alpha = 'a'
    for i in range(0,26):
        test_list.append(alpha)
        alpha = chr(ord(alpha) + 1)
    
    # Getting door numbers with last character as alphabet
    last_alpha = [dnm[-1] for dnm in door_numbers]
    # print(last_alpha)    
    
    # Getting index of Doors with alphabets
    door_index_with_alpha = []
    i = 0
    while (i < len(last_alpha)):
        if (test_list.count(last_alpha[i]) > 0):
            door_index_with_alpha.append(i)
        i += 1
    # print(door_index_with_alpha)  

    # Get all door num with alphabets
    door_num_with_alpha = [door_numbers[i] for i in door_index_with_alpha]
    
    # Removing last character from every string
    door_num_alpha_remove = [a[:-1] for a in door_num_with_alpha]
    # print(door_num_alpha_remove)
       
    # Replacing door numbers with removed alphabets
    door_num_dict = dict(zip(door_index_with_alpha, door_num_alpha_remove))
    door_num_without_alpha_list = [door_num_dict.get(i,j) for i,j in enumerate(door_numbers)]
    # print(door_num_without_alpha_list)
    
    # Creating Self Door Number Dictionary with index number
    door_num_dict = {}
    index = 0
    for item in door_num_without_alpha_list:
        if item in door_num_dict:
            door_num_dict[item] += [index]
            index += 1
        else:
            door_num_dict[item] = [index]
            index += 1
    # print(door_num_dict)
    
    # Creating Door number dicitionary to count occurences
    dict_door_num_with_occurences = {k:v for (k,v) in door_num_dict.items() if (len(v)>1)}
    door_num_with_occurences = list(dict_door_num_with_occurences.keys())
    # print(door_num_with_occurences)
    door_num_occurences = list(dict_door_num_with_occurences.values())
    # print(door_num_occurences)
    # print(dict_door_num_with_occurences)
    
    # Length of nested lists of occurences
    length_of_nested_door_occurences = [len(x) for x in door_num_occurences]
    # print(length_of_nested_door_occurences)
    
    # Flattened list of occurences index
    door_num_occurences_unnested = [item for sublist in door_num_occurences for item in sublist]
    # print(door_num_occurences_unnested)

    #  Getting item at index from Door Number List
    door_num_from_main_list = [door_numbers[i] for i in door_num_occurences_unnested]
    # print(door_num_from_main_list)
    
    # Nesting Door Number Values for checking
    door_num_from_main_list_iter = iter(door_num_from_main_list)
    door_num_nested = [list(islice(door_num_from_main_list_iter, elem)) for elem in length_of_nested_door_occurences]
    # print(door_num_nested)
    
    # Acquiring last characted of nested item in list
    last_alpha_nested = []
    for list in door_num_nested:
        temp = []
        temp = [element[-1] for element in list]
        last_alpha_nested.append(temp)
    # print(last_alpha_nested)
    
    # Sorting last characted of nested item in list(a,b,c..)   
    test_for_inconsistent_door_numbers = []
    for list in last_alpha_nested:
        temp = []
        temp = sorted(list)
        test_for_inconsistent_door_numbers.append(temp)
    # print(test_for_inconsistent_door_numbers)
    
    # Combining list of characters to string(abc,def,ghi,....)
    combine_chars_to_string = []
    for list in test_for_inconsistent_door_numbers:
        def convert(s):
            str1 = ""
            return(str1.join(s))
        temp = []
        temp = convert(list)
        combine_chars_to_string.append(temp)
    # print(combine_chars_to_string)
    
    # Function to check continuity of string combined in list
    def check_continuity_of_string(s):
        l = len(s)
        s = ''.join(sorted(s))
        for i in range(1,l):
            if ord(s[i]) -ord(s[i-1]) != 1:
                return False
        return True
    
    string_continuity_bool = []
    for str in combine_chars_to_string:
        if __name__ == "__main__":
            temp = []
            if check_continuity_of_string(str):
                temp = True
            else:
                temp = False
            string_continuity_bool.append(temp)
    # print(string_continuity_bool)
    
    # Index of Multiple Doors in Rooms with issues
    index_of_failure_door_room_num = [i for i, x in enumerate(string_continuity_bool) if not x]
    # print(index_of_failure_door_roon_num)
    
    # List of mismatching doors for user
    room_with_multiple_doors_issues = [door_num_with_occurences[i] for i in index_of_failure_door_room_num]
    
    len_of_multi_door_issues_list = len(room_with_multiple_doors_issues)
    if (len_of_multi_door_issues_list > 0):
        print("Door number sequencing needs to be checked.\n Please find list of Room numbers assigned to doors below to check in Revit Model-\n")
    else:
        print("Door number sequencing has no issues")
    print(room_with_multiple_doors_issues)   
    print('*'*120)
    
####################################################################################################################

elif userInputcategory == '03.Function':
    
    if len(doors_with_no_functions_assigned) == 0:
        print("Door Functions are assigned to all Doors")
    else:
        print("Door Functions missing for the following doors\n")
        door_nums_with_no_functions_assigned = [door_numbers[i] for i in index_for_doors_with_no_functions_assigned]
        door_room_numbers_with_no_function_assigned = [door_room_numbers[i] for i in index_for_doors_with_no_functions_assigned]
        door_room_names_with_no_function_assigned = [door_room_names[i] for i in index_for_doors_with_no_functions_assigned]
        door_to_room_names_with_no_function_assigned = [door_to_room_name_list[i] for i in index_for_doors_with_no_functions_assigned]
        doors_from_room_names_with_no_function_assigned = [door_from_room_name_list[i] for i in index_for_doors_with_no_functions_assigned]

        # List of Doors with missing Functions
        door_functions_missing = output_statement(door_nums_with_no_functions_assigned, door_room_numbers_with_no_function_assigned, door_room_names_with_no_function_assigned, door_to_room_names_with_no_function_assigned, doors_from_room_names_with_no_function_assigned)
    
    print('*'*120)
        
    if len(doors_with_invalid_functions) == 0:
        print("Door Functions assigned to doors are valid")
    else:
        print('Door Functions are assigned to the doors but are invalid.\nPlease verify the functions against the Excel\n')
        door_numbers_with_invalid_functions = [door_numbers_with_functions[i] for i in index_of_invalid_door_functions]
        door_room_numbers_with_invalid_functions = [door_room_numbers_with_functions[i] for i in index_of_invalid_door_functions]
        door_room_names_with_invalid_functions = [door_room_names_with_functions[i] for i in index_of_invalid_door_functions]
        door_to_room_names_with_invalid_functions = [door_to_room_names_with_functions[i] for i in index_of_invalid_door_functions]
        door_from_room_names_with_invalid_functions = [door_from_room_names_with_functions[i] for i in index_of_invalid_door_functions]
        
        # List of Doors with invalid Functions
        door_functions_invalid = output_statement(door_numbers_with_invalid_functions,door_room_numbers_with_invalid_functions, door_room_names_with_invalid_functions, door_to_room_names_with_invalid_functions, door_from_room_names_with_invalid_functions )

    print('*'*120)
    
####################################################################################################################

elif userInputcategory == '04.Leaf Number':
 
    filter_doors_with_leaf_number_param_fail = doors_with_family_param_failure(test_for_doors_with_leaves, doors_with_valid_functions,door_numbers_with_valid_functions)
    # print(filter_doors_with_leaf_number_param_pass)
    filtered_doors_leaf_test_fail = filter_doors_with_leaf_number_param_fail[0]
    # print(filtered_doors_leaf_test_fail)
    filtered_door_nums_leaf_test_fail = filter_doors_with_leaf_number_param_fail[1]
    # print(filtered_door_nums_leaf_test_fail)
    if len(filtered_door_nums_leaf_test_fail) == 0:
        print("Doors having valid functions have Leaf Numbers")
    else:
        print("Leaf Numbers missing from Doors with valid functions\n")
       
    print('*'*120)  
       
    if len(mismatch_index_for_door_leaf_number) == 0:
        print("Doors have valid functions and valid leaf numbers")
    else:
        print("Doors have valid functions, but invalid leaf numbers.\nPlease check the following doors\n")
        doors_with_mismatch_leaf_number = [doors_with_valid_functions[i] for i in mismatch_index_for_door_leaf_number]
        door_numbers_with_mismatch_leaf_number = [door_numbers_with_valid_functions[i] for i in mismatch_index_for_door_leaf_number]
        door_room_numbers_with_mismatch_leaf_number = [door_room_numbers_with_valid_functions[i] for i in mismatch_index_for_door_leaf_number]
        door_room_names_with_mismatch_leaf_number = [door_room_names_with_valid_functions[i] for i in mismatch_index_for_door_leaf_number]
        door_to_room_names_with_mismatch_leaf_number = [door_to_room_names_with_valid_functions[i] for i in mismatch_index_for_door_leaf_number]
        door_from_room_names_with_mismatch_leaf_number = [door_from_room_names_with_valid_functions[i] for i in mismatch_index_for_door_leaf_number]
        
        door_leaf_number_mismatch = output_statement(door_numbers_with_mismatch_leaf_number, door_room_numbers_with_mismatch_leaf_number, door_room_names_with_mismatch_leaf_number, door_to_room_names_with_mismatch_leaf_number, door_from_room_names_with_mismatch_leaf_number)
    
    print('*'*120)
####################################################################################################################

elif userInputcategory == '05.Single/Equal/Unequal Leaves':
    
    # Double Unequal leaves Failure
    
    if len(mismatch_index_for_door_with_unequal_leaves) == 0:
        print('Doors with Unequal Leaves have valid Equal/Unequal Values')
    else:
        print('Doors with Unequal Leaves have invalid Equal/Unequal Values.\n Please check the following doors.\n')
        filter_doors_with_unequal_leaves_invalid =  [ e for i, e in enumerate(double_doors_with_unequal_leaves) if i in set_index_of_mismatch_door_with_unequal_leaves]
        filter_door_numbers_with_unequal_leaves_invalid = [ e for i, e in enumerate(double_door_numbers_with_unequal_leaves) if i in set_index_of_mismatch_door_with_unequal_leaves]
        filter_door_room_numbers_with_unequal_leaves_invalid = shared_parameter_values(filter_doors_with_unequal_leaves_invalid, 'Room_Number')
        filter_door_room_names_with_unequal_leaves_invalid = shared_parameter_values(filter_doors_with_unequal_leaves_invalid,'Room_Name')
        filter_door_to_from_room_names_with_unequal_leaves_invalid = troom_froom_name_for_doors(filter_doors_with_unequal_leaves_invalid)
        filter_door_to_room_names_with_unequal_leaves_invalid = filter_door_to_from_room_names_with_unequal_leaves_invalid[0]
        filter_door_from_room_names_with_unequal_leaves_invalid = filter_door_to_from_room_names_with_unequal_leaves_invalid[1]
        
        double_door_unequal_mismatch = output_statement(filter_door_numbers_with_unequal_leaves_invalid, filter_door_room_numbers_with_unequal_leaves_invalid, filter_door_room_names_with_unequal_leaves_invalid, filter_door_to_room_names_with_unequal_leaves_invalid, filter_door_from_room_names_with_unequal_leaves_invalid )
    
    print('*'*120)
        
    # Double Equal Leaves Failure
    
    if len(mismatch_index_for_door_with_equal_leaves) == 0:
        print('Doors with Double Equal Leaves have valid Equal/Unequal Values')
    else:
        print('Doors with Double Equal Leaves have invalid Equal/Unequal Values.\nPlease check the following doors.\n')
        filter_doors_with_equal_leaves_invalid =  [ e for i, e in enumerate(double_doors_with_equal_leaves) if i in set_index_of_mismatch_door_with_equal_leaves]
        filter_door_numbers_with_equal_leaves_invalid = [ e for i, e in enumerate(double_door_numbers_with_equal_leaves) if i in set_index_of_mismatch_door_with_equal_leaves]
        filter_door_room_numbers_with_equal_leaves_invalid = shared_parameter_values(filter_doors_with_equal_leaves_invalid, 'Room_Number')
        filter_door_room_names_with_equal_leaves_invalid = shared_parameter_values(filter_doors_with_equal_leaves_invalid,'Room_Name')
        filter_door_to_from_room_names_with_equal_leaves_invalid = troom_froom_name_for_doors(filter_doors_with_equal_leaves_invalid)
        filter_door_to_room_names_with_equal_leaves_invalid = filter_door_to_from_room_names_with_equal_leaves_invalid[0]
        filter_door_from_room_names_with_equal_leaves_invalid = filter_door_to_from_room_names_with_equal_leaves_invalid[1]
        
        double_door_equal_mismatch = output_statement(filter_door_numbers_with_equal_leaves_invalid, filter_door_room_numbers_with_equal_leaves_invalid, filter_door_room_names_with_equal_leaves_invalid, filter_door_to_room_names_with_equal_leaves_invalid, filter_door_from_room_names_with_equal_leaves_invalid )
     
    print('*'*120)
        
    # Single Equal Leaves Failure
    
    if len(mismatch_index_for_door_with_single_equal_unequal_leaf) == 0:
        print('Doors with Single Leaf have valid Equal/Unequal Values')
    else:
        print('Doors with Single Leaf have invalid Equal/Unequal Values.\nPlease check the following doors.\n')
        filter_doors_with_single_leaf_invalid = [ e for i, e in enumerate(doors_with_single_leaf) if i in set_index_of_mismatch_door_with_single_equal_unequal_leaf]
        filter_door_numbers_with_single_leaf_invalid = [ e for i, e in enumerate(door_numbers_with_single_leaf) if i in set_index_of_mismatch_door_with_single_equal_unequal_leaf]
        filter_door_room_numbers_with_single_leaf_invalid = shared_parameter_values(filter_doors_with_single_leaf_invalid, 'Room_Number')
        filter_door_room_names_with_single_leaf_invalid = shared_parameter_values(filter_doors_with_single_leaf_invalid, 'Room_Name')
        filter_door_to_from_room_names_with_single_leaf_invalid = troom_froom_name_for_doors(filter_doors_with_single_leaf_invalid)
        filter_door_to_room_names_with_single_leaf_invalid = filter_door_to_from_room_names_with_single_leaf_invalid[0]
        filter_door_from_room_names_with_single_leaf_invalid = filter_door_to_from_room_names_with_single_leaf_invalid[1]        
    
        single_door_equal_mismatch = output_statement(filter_door_numbers_with_single_leaf_invalid, filter_door_room_numbers_with_single_leaf_invalid, filter_door_room_names_with_single_leaf_invalid, filter_door_to_room_names_with_single_leaf_invalid, filter_door_from_room_names_with_single_leaf_invalid )
    
    print('*'*120)    
                
####################################################################################################################

elif userInputcategory == '06.Leaf Width':
    
    # Single Door Widths
    
    if len(test_index_for_single_doors_width ) == 0:
        print('Door Widths for Single Leaf match the Design Requirements')
    else:
        print('Door Widths for Single Leaf does not match the Design Requirements.\nPlease check the following doors.\n')
        filter_doors_with_single_leaf_width_invalid = [e for i, e in enumerate(doors_with_valid_single_equal_leaf) if i in set_index_of_mismatch_doors_with_single_leaf_width]
        filter_door_numbers_with_single_leaf_width_invalid = [e for i, e in enumerate(door_numbers_with_valid_single_equal_leaf) if i in set_index_of_mismatch_doors_with_single_leaf_width]
        filter_door_room_numbers_with_single_leaf_width_invalid = shared_parameter_values(filter_doors_with_single_leaf_width_invalid, 'Room_Number')
        filter_door_room_names_with_single_leaf_width_invalid = shared_parameter_values(filter_doors_with_single_leaf_width_invalid, 'Room_Name')
        filter_door_to_from_room_names_with_single_leaf_width_invalid = troom_froom_name_for_doors(filter_doors_with_single_leaf_width_invalid)
        filter_door_to_room_names_with_single_leaf_width_invalid = filter_door_to_from_room_names_with_single_leaf_width_invalid[0]
        filter_door_from_room_names_with_single_leaf_width_invalid = filter_door_to_from_room_names_with_single_leaf_width_invalid[1]
        
        single_doors_leaf_width_invalid = output_statement(filter_door_numbers_with_single_leaf_width_invalid ,filter_door_room_numbers_with_single_leaf_width_invalid, filter_door_room_names_with_single_leaf_width_invalid, filter_door_to_room_names_with_single_leaf_width_invalid, filter_door_from_room_names_with_single_leaf_width_invalid )

    print('*'*120)
    
    # Double Door Widths
    
    if len(test_index_for_double_equal_doors_width) == 0:
        print('Door Widths for Double Equal Leaf Doors match the Design Requirements')
    else:
        print('Door Widths for Double Equal Leaf Doors does not match the Design Requirements.\nPlease check the following doors.\n')
        filter_doors_with_double_equal_leaves_width_invalid = [e for i, e in enumerate(doors_with_valid_equal_leaves) if i in set_index_of_mismatch_doors_with_double_equal_leaves_width]
        filter_door_numbers_with_double_equal_leaves_width_invalid = [e for i, e in enumerate(door_numbers_with_valid_equal_leaves) if i in set_index_of_mismatch_doors_with_double_equal_leaves_width]
        filter_door_room_numbers_with_double_equal_leaves_width_invalid = shared_parameter_values(filter_doors_with_double_equal_leaves_width_invalid, 'Room_Number')
        filter_door_room_names_with_double_equal_leaves_width_invalid = shared_parameter_values(filter_doors_with_double_equal_leaves_width_invalid, 'Room_Name')
        filter_door_to_from_room_names_with_double_equal_leaves_width_invalid = troom_froom_name_for_doors(filter_doors_with_double_equal_leaves_width_invalid)
        filter_door_to_room_names_with_double_equal_leaves_width_invalid = filter_door_to_from_room_names_with_double_equal_leaves_width_invalid[0]
        filter_door_from_room_names_with_double_equal_leaves_width_invalid = filter_door_to_from_room_names_with_double_equal_leaves_width_invalid[1]
     
        double_equal_leaves_door_width_invalid =  output_statement(filter_door_numbers_with_double_equal_leaves_width_invalid ,filter_door_room_numbers_with_double_equal_leaves_width_invalid, filter_door_room_names_with_double_equal_leaves_width_invalid, filter_door_to_room_names_with_double_equal_leaves_width_invalid, filter_door_from_room_names_with_double_equal_leaves_width_invalid )
     
    print('*'*120)
     
    # Double Door Unequal - Main Panel Widths
        
    if len(test_index_for_double_unequal_doors_main_panel_width) == 0:
        print('Door Main Panel Widths for Double Unequal Leaves match the Design Requirements')
    else:
        print('Door Widths for Main Panel for Double Unequal Doors does not match the Design Requirements.\nPlease check the following doors.\n')
        filter_doors_with_unequal_leaves_main_panel_width_invalid = [e for i, e in enumerate(doors_with_valid_unequal_leaves) if i in set_index_of_mismatch_doors_with_unequal_main_panel_width]
        filter_door_numbers_with_unequal_leaves_main_panel_width_invalid = [e for i, e in enumerate(door_numbers_with_valid_unequal_leaves) if i in set_index_of_mismatch_doors_with_unequal_main_panel_width]
        filter_door_room_numbers_with_unequal_leaves_main_panel_width_invalid= shared_parameter_values(filter_doors_with_unequal_leaves_main_panel_width_invalid, 'Room_Number')
        filter_door_room_names_with_unequal_leaves_main_panel_width_invalid = shared_parameter_values(filter_doors_with_unequal_leaves_main_panel_width_invalid, 'Room_Name')
        filter_door_to_from_room_names_with_unequal_leaves_main_panel_width_invalid = troom_froom_name_for_doors(filter_doors_with_unequal_leaves_main_panel_width_invalid)
        filter_door_to_room_names_with_unequal_leaves_main_panel_width_invalid = filter_door_to_from_room_names_with_unequal_leaves_main_panel_width_invalid[0]
        filter_door_from_room_names_with_unequal_leaves_main_panel_width_invalid= filter_door_to_from_room_names_with_unequal_leaves_main_panel_width_invalid[1]
        
        unequal_doors_main_width_invalid = output_statement(filter_door_numbers_with_unequal_leaves_main_panel_width_invalid ,filter_door_room_numbers_with_unequal_leaves_main_panel_width_invalid, filter_door_room_names_with_unequal_leaves_main_panel_width_invalid, filter_door_to_room_names_with_unequal_leaves_main_panel_width_invalid, filter_door_from_room_names_with_unequal_leaves_main_panel_width_invalid )

    print('*'*120)
    
    # Double Door Unequal - Side Panel Widths
        
    if len(test_index_for_double_unequal_doors_side_panel_width) == 0:
        print('Door Side Panel Widths for Double Unequal Leaves match the Design Requirements')
    else:
        print('Door Widths for Side Panel for Double Unequal Doors does not match the Design Requirements.\nPlease check the following doors.\n')
        filter_doors_with_unequal_leaves_side_panel_width_invalid = [e for i, e in enumerate(doors_with_valid_unequal_leaves) if i in set_index_of_mismatch_doors_with_unequal_side_panel_width]
        filter_door_numbers_with_unequal_leaves_side_panel_width_invalid = [e for i, e in enumerate(door_numbers_with_valid_unequal_leaves) if i in set_index_of_mismatch_doors_with_unequal_side_panel_width]
        filter_door_room_numbers_with_unequal_leaves_side_panel_width_invalid= shared_parameter_values(filter_doors_with_unequal_leaves_side_panel_width_invalid, 'Room_Number')
        filter_door_room_names_with_unequal_leaves_side_panel_width_invalid = shared_parameter_values(filter_doors_with_unequal_leaves_side_panel_width_invalid, 'Room_Name')
        filter_door_to_from_room_names_with_unequal_leaves_side_panel_width_invalid = troom_froom_name_for_doors(filter_doors_with_unequal_leaves_side_panel_width_invalid)
        filter_door_to_room_names_with_unequal_leaves_side_panel_width_invalid = filter_door_to_from_room_names_with_unequal_leaves_side_panel_width_invalid[0]
        filter_door_from_room_names_with_unequal_leaves_side_panel_width_invalid= filter_door_to_from_room_names_with_unequal_leaves_side_panel_width_invalid[1]
        
        unequal_doors_side_width_invalid = output_statement(filter_door_numbers_with_unequal_leaves_side_panel_width_invalid ,filter_door_room_numbers_with_unequal_leaves_side_panel_width_invalid, filter_door_room_names_with_unequal_leaves_main_panel_width_invalid, filter_door_to_room_names_with_unequal_leaves_side_panel_width_invalid, filter_door_from_room_names_with_unequal_leaves_side_panel_width_invalid )

    print('*'*120)

####################################################################################################################

elif userInputcategory == '07.Leaf Height':
    
    
    # Single Door Heights
    
    if len(test_index_for_single_doors_height) == 0:
        print('Door Heights for Single Leaf match the Design Requirements')
    else:
        print('Door Heights for Single Leaf does not match the Design Requirements.\nPlease check the following doors.\n')
        filter_doors_with_single_leaf_height_invalid = [e for i, e in enumerate(doors_with_valid_single_equal_leaf) if i in set_index_of_mismatch_doors_with_single_leaf_height]
        filter_door_numbers_with_single_leaf_height_invalid = [e for i, e in enumerate(door_numbers_with_valid_single_equal_leaf) if i in set_index_of_mismatch_doors_with_single_leaf_height]
        filter_door_room_numbers_with_single_leaf_height_invalid = shared_parameter_values(filter_doors_with_single_leaf_height_invalid, 'Room_Number')
        filter_door_room_names_with_single_leaf_height_invalid = shared_parameter_values(filter_doors_with_single_leaf_height_invalid, 'Room_Name')
        filter_door_to_from_room_names_with_single_leaf_height_invalid = troom_froom_name_for_doors(filter_doors_with_single_leaf_height_invalid)
        filter_door_to_room_names_with_single_leaf_height_invalid = filter_door_to_from_room_names_with_single_leaf_height_invalid[0]
        filter_door_from_room_names_with_single_leaf_height_invalid = filter_door_to_from_room_names_with_single_leaf_height_invalid[1]
        
        single_doors_leaf_height_invalid = output_statement(filter_door_numbers_with_single_leaf_height_invalid ,filter_door_room_numbers_with_single_leaf_height_invalid, filter_door_room_names_with_single_leaf_height_invalid, filter_door_to_room_names_with_single_leaf_height_invalid, filter_door_from_room_names_with_single_leaf_height_invalid )

    print('*'*120)
    
    # Double Door Heights
    
    if len(test_index_for_double_equal_doors_height) == 0:
        print('Door Heights for Double Equal Leaf Doors match the Design Requirements')
    else:
        print('Door Heights for Double Equal Leaf Doors does not match the Design Requirements.\nPlease check the following doors.\n')
        filter_doors_with_double_equal_leaves_height_invalid = [e for i, e in enumerate(doors_with_valid_equal_leaves) if i in set_index_of_mismatch_doors_with_double_equal_leaves_height]
        filter_door_numbers_with_double_equal_leaves_height_invalid = [e for i, e in enumerate(door_numbers_with_valid_equal_leaves) if i in set_index_of_mismatch_doors_with_double_equal_leaves_height]
        filter_door_room_numbers_with_double_equal_leaves_height_invalid = shared_parameter_values(filter_doors_with_double_equal_leaves_height_invalid, 'Room_Number')
        filter_door_room_names_with_double_equal_leaves_height_invalid = shared_parameter_values(filter_doors_with_double_equal_leaves_height_invalid, 'Room_Name')
        filter_door_to_from_room_names_with_double_equal_leaves_height_invalid = troom_froom_name_for_doors(filter_doors_with_double_equal_leaves_height_invalid)
        filter_door_to_room_names_with_double_equal_leaves_height_invalid = filter_door_to_from_room_names_with_double_equal_leaves_height_invalid[0]
        filter_door_from_room_names_with_double_equal_leaves_height_invalid = filter_door_to_from_room_names_with_double_equal_leaves_height_invalid[1]
     
        double_equal_leaves_door_height_invalid =  output_statement(filter_door_numbers_with_double_equal_leaves_height_invalid ,filter_door_room_numbers_with_double_equal_leaves_height_invalid, filter_door_room_names_with_double_equal_leaves_height_invalid, filter_door_to_room_names_with_double_equal_leaves_height_invalid, filter_door_from_room_names_with_double_equal_leaves_height_invalid )
     
    print('*'*120)

    if len(test_index_for_double_unequal_doors_height) == 0:
        print('Door Heights for Double Unequal Leaf Doors match the Design Requirements')
    else:
        print('Door Heights for Double Unequal Leaf Doors does not match the Design Requirements.\nPlease check the following doors.\n')
        filter_doors_with_double_unequal_leaves_height_invalid = [e for i, e in enumerate(doors_with_valid_unequal_leaves) if i in set_index_of_mismatch_doors_with_double_unequal_leaves_height]
        filter_door_numbers_with_double_unequal_leaves_height_invalid = [e for i, e in enumerate(door_numbers_with_valid_unequal_leaves) if i in set_index_of_mismatch_doors_with_double_unequal_leaves_height]
        filter_door_room_numbers_with_double_unequal_leaves_height_invalid = shared_parameter_values(filter_doors_with_double_unequal_leaves_height_invalid, 'Room_Number')
        filter_door_room_names_with_double_unequal_leaves_height_invalid = shared_parameter_values(filter_doors_with_double_unequal_leaves_height_invalid, 'Room_Name')
        filter_door_to_from_room_names_with_double_unequal_leaves_height_invalid = troom_froom_name_for_doors(filter_doors_with_double_unequal_leaves_height_invalid)
        filter_door_to_room_names_with_double_unequal_leaves_height_invalid = filter_door_to_from_room_names_with_double_unequal_leaves_height_invalid[0]
        filter_door_from_room_names_with_double_unequal_leaves_height_invalid = filter_door_to_from_room_names_with_double_unequal_leaves_height_invalid[1]
     
        double_unequal_leaves_door_height_invalid =  output_statement(filter_door_numbers_with_double_unequal_leaves_height_invalid ,filter_door_room_numbers_with_double_unequal_leaves_height_invalid, filter_door_room_names_with_double_unequal_leaves_height_invalid, filter_door_to_room_names_with_double_unequal_leaves_height_invalid, filter_door_from_room_names_with_double_unequal_leaves_height_invalid )
    
    print('*'*120)

####################################################################################################################

elif userInputcategory == '08.Fire Rating of Doors and against Wall Fire Ratings':
    if len(doors_with_no_fire_rating_assigned) == 0:
        print('All Doors have been Fire Rated')
    else:
        print('The following Doors have no Fire Rating assigned.\nPlease add "0" in case of Doors with no Fire Rating.\n')
        door_numbers_with_no_fire_rating_assigned = [door_numbers_with_valid_functions[i] for i in index_for_doors_with_no_fire_rating_assigned]
        door_room_numbers_with_no_fire_rating_assigned = [door_room_numbers_with_valid_functions[i] for i in index_for_doors_with_no_fire_rating_assigned]
        door_room_names_with_no_fire_rating_assigned = [door_room_names_with_valid_functions[i] for i in index_for_doors_with_no_fire_rating_assigned]
        door_to_room_names_with_no_fire_rating_assigned = [door_to_room_names_with_valid_functions[i] for i in index_for_doors_with_no_fire_rating_assigned]
        door_from_room_names_with_no_fire_rating_assigned = [door_from_room_names_with_valid_functions[i] for i in index_for_doors_with_no_fire_rating_assigned]

        doors_with_no_fire_rating_assigned = output_statement(door_numbers_with_no_fire_rating_assigned, door_room_numbers_with_no_fire_rating_assigned, door_room_names_with_no_fire_rating_assigned, door_to_room_names_with_no_fire_rating_assigned, door_from_room_names_with_no_fire_rating_assigned )    
    
    print('*'*120)
    
    if len(doors_with_invalid_fire_rating) == 0:
        print("All Doors with Fire Rating have valid Fire Rating values.")
    else:
        print('The following Doors have invalid Fire Rating assigned.\nPlease check the Fire Ratings for the following doors.\n')
        door_numbers_with_invalid_fire_rating = [e for i, e in enumerate(door_numbers_with_fire_rating) if i in set_index_of_mismatch_door_with_fire_rating]
        door_room_numbers_with_invalid_fire_rating = shared_parameter_values(doors_with_invalid_fire_rating, 'Room_Number')
        door_room_names_with_invalid_fire_rating = shared_parameter_values(doors_with_invalid_fire_rating, 'Room_Name')
        door_to_from_room_names_with_invalid_fire_rating = troom_froom_name_for_doors(doors_with_invalid_fire_rating)
        door_to_room_names_with_invalid_fire_rating = door_to_from_room_names_with_invalid_fire_rating[0]
        door_from_room_names_with_invalid_fire_rating = door_to_from_room_names_with_invalid_fire_rating[1]
        
        doors_with_invalid_fire_rating_assigned = output_statement(door_numbers_with_invalid_fire_rating, door_room_numbers_with_invalid_fire_rating, door_room_names_with_invalid_fire_rating, door_to_room_names_with_invalid_fire_rating, door_from_room_names_with_invalid_fire_rating)
    
    print('*'*120)
    
    if len(index_of_fire_rated_doors_with_no_wall_fire_rating) == 0:
        print("All Doors are placed on Fire Rated Walls")
    else:
        print('The following Doors have walls without Fire Rating.\nPlease add "0" in case of Walls/Doors with no Fire Rating for the following Doors.\n')

        door_numbers_with_fire_rating_but_no_wall_fire_rating  = [d.get_Parameter(BuiltInParameter.DOOR_NUMBER).AsString() for d in doors_with_fire_rating_but_no_wall_fire_rating]
        door_room_numbers_with_fire_rating_but_no_wall_fire_rating = shared_parameter_values(doors_with_fire_rating_but_no_wall_fire_rating, 'Room_Number')
        door_room_names_with_fire_rating_but_no_wall_fire_rating = shared_parameter_values(doors_with_fire_rating_but_no_wall_fire_rating, 'Room_Number')
        door_to_from_room_names_with_fire_rating_but_no_wall_fire_rating = troom_froom_name_for_doors(doors_with_fire_rating_but_no_wall_fire_rating)
        door_to_room_names_with_fire_rating_but_no_wall_fire_rating  = door_to_from_room_names_with_fire_rating_but_no_wall_fire_rating [0]
        door_from_room_names_with_fire_rating_but_no_wall_fire_rating  = door_to_from_room_names_with_fire_rating_but_no_wall_fire_rating [1]
    
        doors_with_fire_rating_but_no_wall_rating_assigned = output_statement(door_numbers_with_fire_rating_but_no_wall_fire_rating, door_room_numbers_with_fire_rating_but_no_wall_fire_rating, door_room_names_with_fire_rating_but_no_wall_fire_rating, door_to_room_names_with_fire_rating_but_no_wall_fire_rating , door_from_room_names_with_fire_rating_but_no_wall_fire_rating  )
  
    print('*'*120)
        
    if len(doors_with_walls_with_invalid_fire_ratings) == 0:
        print('All Doors have Fire Ratings as per Wall Ratings,i.e. Door Rating = 3/4th of Wall Rating')
    else:
        print('The rating of the following doors is not as per Wall Ratings.\nPlease update the following Doors to have Fire ratings 3/4th of Wall Rating.\n')
        door_numbers_with_walls_with_invalid_fire_ratings = [e for i, e in enumerate(door_numbers_with_fire_rating_and_wall_rating) if i in set_index_of_mismatch_doors_fire_rating_against_wall_ratings]
        door_room_numbers_with_walls_with_invalid_fire_ratings = shared_parameter_values(doors_with_walls_with_invalid_fire_ratings, 'Room_Number')
        door_room_names_with_walls_with_invalid_fire_ratings = shared_parameter_values(doors_with_walls_with_invalid_fire_ratings, 'Room_Name')
        door_to_from_room_names_with_walls_with_invalid_fire_ratings = troom_froom_name_for_doors(doors_with_walls_with_invalid_fire_ratings)
        door_to_room_names_with_walls_with_invalid_fire_ratings = door_to_from_room_names_with_walls_with_invalid_fire_ratings[0]
        door_from_room_names_with_walls_with_invalid_fire_ratings = door_to_from_room_names_with_walls_with_invalid_fire_ratings[1]
        
        doors_with_fire_rating_but_invalid_wall_fire_rating_assigned = output_statement(door_numbers_with_walls_with_invalid_fire_ratings,door_room_numbers_with_walls_with_invalid_fire_ratings, door_room_names_with_walls_with_invalid_fire_ratings, door_to_room_names_with_walls_with_invalid_fire_ratings, door_from_room_names_with_walls_with_invalid_fire_ratings)
    
    print('*'*120)    
      
####################################################################################################################

elif userInputcategory == '09.Acoustic Rating of Doors and against Wall Acoustic Ratings':

    if len(doors_with_no_acoustic_rating_assigned) == 0:
        print('All Doors have been Acoustically Rated')
    else:
        print('The following Doors have no Acoustic Rating assigned.\nPlease add "0" in case of Doors with no Acoustic Rating.')
        door_numbers_with_no_acoustic_rating_assigned = [door_numbers_with_valid_functions[i] for i in index_for_doors_with_no_acoustic_rating_assigned]
        door_room_numbers_with_no_acoustic_rating_assigned = [door_room_numbers_with_valid_functions[i] for i in index_for_doors_with_no_acoustic_rating_assigned]
        door_room_names_with_no_acoustic_rating_assigned = [door_room_names_with_valid_functions[i] for i in index_for_doors_with_no_acoustic_rating_assigned]
        door_to_room_names_with_no_acoustic_rating_assigned = [door_to_room_names_with_valid_functions[i] for i in index_for_doors_with_no_acoustic_rating_assigned]
        door_from_room_names_with_no_acoustic_rating_assigned = [door_from_room_names_with_valid_functions[i] for i in index_for_doors_with_no_acoustic_rating_assigned]

        doors_with_no_acoustic_rating_assigned = output_statement(door_numbers_with_no_acoustic_rating_assigned, door_room_numbers_with_no_acoustic_rating_assigned, door_room_names_with_no_acoustic_rating_assigned, door_to_room_names_with_no_acoustic_rating_assigned, door_from_room_names_with_no_acoustic_rating_assigned )    
    
    print('*'*120)
    
    if len(doors_with_invalid_acoustic_rating) == 0:
        print("All Doors with Acoustic Rating have valid Acoustic Rating values.")
    else:
        print('The following Doors have invalid Acoustic Rating assigned.\nPlease check the Acoustic Ratings for the following doors')
        door_numbers_with_invalid_acoustic_rating = [e for i, e in enumerate(door_numbers_with_acoustic_rating) if i in set_index_of_mismatch_door_with_acoustic_rating]
        door_room_numbers_with_invalid_acoustic_rating = shared_parameter_values(doors_with_invalid_acoustic_rating, 'Room_Number')
        door_room_names_with_invalid_acoustic_rating = shared_parameter_values(doors_with_invalid_acoustic_rating, 'Room_Name')
        door_to_from_room_names_with_invalid_acoustic_rating = troom_froom_name_for_doors(doors_with_invalid_acoustic_rating)
        door_to_room_names_with_invalid_acoustic_rating = door_to_from_room_names_with_invalid_acoustic_rating[0]
        door_from_room_names_with_invalid_acoustic_rating = door_to_from_room_names_with_invalid_acoustic_rating[1]
        
        doors_with_invalid_acoustic_rating_assigned = output_statement(door_numbers_with_invalid_acoustic_rating, door_room_numbers_with_invalid_acoustic_rating, door_room_names_with_invalid_acoustic_rating, door_to_room_names_with_invalid_acoustic_rating, door_from_room_names_with_invalid_acoustic_rating)
    
    print('*'*120)
    
    if len(index_of_acoustic_rated_doors_with_no_wall_acoustic_rating) == 0:
        print("All Doors are placed on Acoustic Rated Walls")
    else:
        print('The following Doors have walls without Acoustic Rating.\nPlease add "0" in case of Walls/Doors with no Acoustic Rating for the following Doors.')

        door_numbers_with_acoustic_rating_but_no_wall_acoustic_rating  = [d.get_Parameter(BuiltInParameter.DOOR_NUMBER).AsString() for d in doors_with_acoustic_rating_but_no_wall_acoustic_rating]
        door_room_numbers_with_acoustic_rating_but_no_wall_acoustic_rating = shared_parameter_values(doors_with_acoustic_rating_but_no_wall_acoustic_rating, 'Room_Number')
        door_room_names_with_acoustic_rating_but_no_wall_acoustic_rating = shared_parameter_values(doors_with_acoustic_rating_but_no_wall_acoustic_rating, 'Room_Number')
        door_to_from_room_names_with_acoustic_rating_but_no_wall_acoustic_rating = troom_froom_name_for_doors(doors_with_acoustic_rating_but_no_wall_acoustic_rating)
        door_to_room_names_with_acoustic_rating_but_no_wall_acoustic_rating  = door_to_from_room_names_with_acoustic_rating_but_no_wall_acoustic_rating [0]
        door_from_room_names_with_acoustic_rating_but_no_wall_acoustic_rating  = door_to_from_room_names_with_acoustic_rating_but_no_wall_acoustic_rating [1]
    
        doors_with_acoustic_rating_but_no_wall_rating_assigned = output_statement(door_numbers_with_acoustic_rating_but_no_wall_acoustic_rating, door_room_numbers_with_acoustic_rating_but_no_wall_acoustic_rating, door_room_names_with_acoustic_rating_but_no_wall_acoustic_rating, door_to_room_names_with_acoustic_rating_but_no_wall_acoustic_rating , door_from_room_names_with_acoustic_rating_but_no_wall_acoustic_rating  )
  
    print('*'*120)
        
    if len(doors_with_walls_with_invalid_acoustic_ratings) == 0:
        print('All Doors have Acoustic Ratings as per Wall Ratings,i.e. Door Rating = (Wall Rating - 20)')
    else:
        print('The rating of the following doors is not as per Wall Ratings.\nPlease update the following Doors to have Acoustic ratings (Wall Rating - 20)')
        door_numbers_with_walls_with_invalid_acoustic_ratings = [e for i, e in enumerate(door_numbers_with_acoustic_rating_and_wall_rating) if i in set_index_of_mismatch_doors_acoustic_rating_against_wall_ratings]
        door_room_numbers_with_walls_with_invalid_acoustic_ratings = shared_parameter_values(doors_with_walls_with_invalid_acoustic_ratings, 'Room_Number')
        door_room_names_with_walls_with_invalid_acoustic_ratings = shared_parameter_values(doors_with_walls_with_invalid_acoustic_ratings, 'Room_Name')
        door_to_from_room_names_with_walls_with_invalid_acoustic_ratings = troom_froom_name_for_doors(doors_with_walls_with_invalid_acoustic_ratings)
        door_to_room_names_with_walls_with_invalid_acoustic_ratings = door_to_from_room_names_with_walls_with_invalid_acoustic_ratings[0]
        door_from_room_names_with_walls_with_invalid_acoustic_ratings = door_to_from_room_names_with_walls_with_invalid_acoustic_ratings[1]
        
        doors_with_acoustic_rating_but_invalid_wall_acoustic_rating_assigned = output_statement(door_numbers_with_walls_with_invalid_acoustic_ratings,door_room_numbers_with_walls_with_invalid_acoustic_ratings, door_room_names_with_walls_with_invalid_acoustic_ratings, door_to_room_names_with_walls_with_invalid_acoustic_ratings, door_from_room_names_with_walls_with_invalid_acoustic_ratings)
    
    print('*'*120)    

####################################################################################################################

elif userInputcategory == '10.Leaf Material & Finishes':
        
    if len(doors_with_invalid_leaf_material) == 0:
        print('All Doors with valid Functions have valid Leaf Materials')
    else:
        print('Leaf Material for the following Doors are not as per design criteria.\nPlease update the Leaf Material for the following Doors')
        door_numbers_with_invalid_leaf_material = [e for i, e in enumerate(door_numbers_with_valid_functions) if i in set_index_of_mismatch_doors_leaf_material]
        door_room_numbers_with_invalid_leaf_material = shared_parameter_values(doors_with_invalid_leaf_material, 'Room_Number')
        door_room_names_with_invalid_leaf_material = shared_parameter_values(doors_with_invalid_leaf_material, 'Room_Name')
        door_to_from_room_names_with_invalid_leaf_material =  troom_froom_name_for_doors(doors_with_invalid_leaf_material)
        door_to_room_names_with_invalid_leaf_material = door_to_from_room_names_with_invalid_leaf_material[0]
        door_from_room_names_with_invalid_leaf_material = door_to_from_room_names_with_invalid_leaf_material[1]
        
        doors_with_invalid_leaf_material_assigned = output_statement(door_numbers_with_invalid_leaf_material, door_room_numbers_with_invalid_leaf_material, door_room_names_with_invalid_leaf_material, door_to_room_names_with_invalid_leaf_material, door_from_room_names_with_invalid_leaf_material)

    print('*'*120)
    
    if len(doors_with_invalid_leaf_finish) == 0:
        print('All Doors with valid Functions have valid Leaf Finishes')
    else:
        print('Leaf Finishes for the following Doors are not as per design criteria.\nPlease update the Leaf Finishes for the following Doors')
        door_numbers_with_invalid_leaf_finish = [e for i, e in enumerate(door_numbers_with_valid_functions) if i in set_index_of_mismatch_doors_leaf_finish]
        door_room_numbers_with_invalid_leaf_finish = shared_parameter_values(doors_with_invalid_leaf_finish, 'Room_Number')
        door_room_names_with_invalid_leaf_finish = shared_parameter_values(doors_with_invalid_leaf_finish, 'Room_Name')
        door_to_from_room_names_with_invalid_leaf_finish =  troom_froom_name_for_doors(doors_with_invalid_leaf_finish)
        door_to_room_names_with_invalid_leaf_finish = door_to_from_room_names_with_invalid_leaf_finish[0]
        door_from_room_names_with_invalid_leaf_finish = door_to_from_room_names_with_invalid_leaf_finish[1]
        
        doors_with_invalid_leaf_finish_assigned = output_statement(door_numbers_with_invalid_leaf_finish, door_room_numbers_with_invalid_leaf_finish, door_room_names_with_invalid_leaf_finish, door_to_room_names_with_invalid_leaf_finish, door_from_room_names_with_invalid_leaf_finish)
    
    print('*'*120)

##################################################################################################################

elif userInputcategory == '11.Frame Material & Finishes':
    
    print('*'*120)    
    if len(doors_with_invalid_frame_material) == 0:
        print('All Doors with valid Functions have valid frame Materials')
    else:
        print('Frame Material for the following Doors are not as per design criteria.\nPlease update the frame Material for the following Doors.\n')
        door_numbers_with_invalid_frame_material = [e for i, e in enumerate(door_numbers_with_valid_functions) if i in set_index_of_mismatch_doors_frame_material]
        door_room_numbers_with_invalid_frame_material = shared_parameter_values(doors_with_invalid_frame_material, 'Room_Number')
        door_room_names_with_invalid_frame_material = shared_parameter_values(doors_with_invalid_frame_material, 'Room_Name')
        door_to_from_room_names_with_invalid_frame_material =  troom_froom_name_for_doors(doors_with_invalid_frame_material)
        door_to_room_names_with_invalid_frame_material = door_to_from_room_names_with_invalid_frame_material[0]
        door_from_room_names_with_invalid_frame_material = door_to_from_room_names_with_invalid_frame_material[1]
        
        doors_with_invalid_frame_material_assigned = output_statement(door_numbers_with_invalid_frame_material, door_room_numbers_with_invalid_frame_material, door_room_names_with_invalid_frame_material, door_to_room_names_with_invalid_frame_material, door_from_room_names_with_invalid_frame_material)

    print('*'*120)
    
    if len(doors_with_invalid_frame_finish) == 0:
        print('All Doors with valid Functions have valid frame Finishes.')
    else:
        print('Frame Finishes for the following Doors are not as per design criteria.\nPlease update the frame Finishes for the following Doors.\n')
        door_numbers_with_invalid_frame_finish = [e for i, e in enumerate(door_numbers_with_valid_functions) if i in set_index_of_mismatch_doors_frame_finish]
        door_room_numbers_with_invalid_frame_finish = shared_parameter_values(doors_with_invalid_frame_finish, 'Room_Number')
        door_room_names_with_invalid_frame_finish = shared_parameter_values(doors_with_invalid_frame_finish, 'Room_Name')
        door_to_from_room_names_with_invalid_frame_finish =  troom_froom_name_for_doors(doors_with_invalid_frame_finish)
        door_to_room_names_with_invalid_frame_finish = door_to_from_room_names_with_invalid_frame_finish[0]
        door_from_room_names_with_invalid_frame_finish = door_to_from_room_names_with_invalid_frame_finish[1]
        
        doors_with_invalid_frame_finish_assigned = output_statement(door_numbers_with_invalid_frame_finish, door_room_numbers_with_invalid_frame_finish, door_room_names_with_invalid_frame_finish, door_to_room_names_with_invalid_frame_finish, door_from_room_names_with_invalid_frame_finish)
    
    print('*'*120)    
  
####################################################################################################################

elif userInputcategory == '12.Undercut':
    
    print('*'*120)
    if len(doors_with_invalid_undercut) == 0:
        print('All Doors with Functions have valid Undercut provided.')
    else:
        print('Undercut for the following Doors are not as per design criteria.\n Please update the Undercut requirements for the following doors.\n')
        door_numbers_with_invalid_undercut = [e for i, e in enumerate(door_numbers_with_valid_functions) if i in set_index_of_mismatch_doors_with_undercut]
        door_room_numbers_with_invalid_undercut = shared_parameter_values(doors_with_invalid_undercut, 'Room_Number')
        door_room_names_with_invalid_undercut = shared_parameter_values(doors_with_invalid_undercut, 'Room_Name')
        door_to_from_room_names_with_invalid_undercut =  troom_froom_name_for_doors(doors_with_invalid_undercut)
        door_to_room_names_with_invalid_undercut = door_to_from_room_names_with_invalid_undercut[0]
        door_from_room_names_with_invalid_undercut = door_to_from_room_names_with_invalid_undercut[1]
        
        doors_with_invalid_undercut = output_statement(door_numbers_with_invalid_undercut, door_room_numbers_with_invalid_undercut, door_room_names_with_invalid_undercut, door_to_room_names_with_invalid_undercut, door_from_room_names_with_invalid_undercut )
    print('*'*120)
    
####################################################################################################################

elif userInputcategory == '13.Fire Rated/Acoustically Treated Door with Grill':
    
    print('*'*120)
    if len(doors_with_grills_and_fire_rated) == 0:
        print('All Doors with Grills have not been Fire Rated.')
    else:
        print('The following Doors, having Grill have Fire rating.\nPlease check the design requirements.')
              
        door_numbers_with_grills_and_fire_rated = [e for i, e in enumerate(door_numbers_with_grills) if i in index_of_doors_with_fire_rated_grill_doors]
        door_room_numbers_with_grills_and_fire_rated = shared_parameter_values(doors_with_grills_and_fire_rated, 'Room_Number')    
        door_room_names_with_grills_and_fire_rated = shared_parameter_values(doors_with_grills_and_fire_rated, 'Room_Name')
        door_to_from_room_names_with_grills_and_fire_rated = troom_froom_name_for_doors(doors_with_grills_and_fire_rated)
        door_to_room_names_with_grills_and_fire_rated = door_to_from_room_names_with_grills_and_fire_rated[0]
        door_from_room_names_with_grills_and_fire_rated = door_to_from_room_names_with_grills_and_fire_rated[1]
        
        doors_with_fire_rating_and_door_grills = output_statement(door_numbers_with_grills_and_fire_rated,  door_room_numbers_with_grills_and_fire_rated, door_room_names_with_grills_and_fire_rated,  door_to_room_names_with_grills_and_fire_rated,  door_from_room_names_with_grills_and_fire_rated)   
       
    print('*'*120)
    if len(doors_with_grills_and_acoustic_rated) == 0:
        print('All Doors with Grills have not been Acoustically Rated.')
    else:
        print('The following Doors, having Grill have Acoustic rating.\nPlease check the design requirements.')
              
        door_numbers_with_grills_and_acoustic_rated = [e for i, e in enumerate(door_numbers_with_grills) if i in index_of_doors_with_acoustic_rated_grill_doors]
        door_room_numbers_with_grills_and_acoustic_rated = shared_parameter_values(doors_with_grills_and_acoustic_rated, 'Room_Number')    
        door_room_names_with_grills_and_acoustic_rated = shared_parameter_values(doors_with_grills_and_acoustic_rated, 'Room_Name')
        door_to_from_room_names_with_grills_and_acoustic_rated = troom_froom_name_for_doors(doors_with_grills_and_acoustic_rated)
        door_to_room_names_with_grills_and_acoustic_rated = door_to_from_room_names_with_grills_and_acoustic_rated[0]
        door_from_room_names_with_grills_and_acoustic_rated = door_to_from_room_names_with_grills_and_acoustic_rated[1]
        
        doors_with_acoustic_rating_and_door_grills = output_statement(door_numbers_with_grills_and_acoustic_rated,  door_room_numbers_with_grills_and_acoustic_rated, door_room_names_with_grills_and_acoustic_rated,  door_to_room_names_with_grills_and_acoustic_rated,  door_from_room_names_with_grills_and_acoustic_rated)   
    
    print('*'*120)
   
####################################################################################################################

else:
    pass

####################################################################################################################



