"""Occupancy Calcuations"""

__title__ = "Occupancy\nCalculations"
__author__= "J K Roshan\nKerketta"

####################################################################################################################
import itertools
import operator

from pyrevit.coreutils import envvars
from decimal import *
from pyrevit import forms
from pyrevit import script
from pyrevit import coreutils
from pyrevit.api import UI  
from pyrevit import revit, DB

from itertools import chain
from itertools import islice
from pyrevit import HOST_APP
####################################################################################################################

import Autodesk.Revit.DB as DB
from  Autodesk.Revit.DB import FilteredElementCollector, BuiltInCategory, BuiltInParameter, Transaction, TransactionGroup, Workset, SpatialElement
from Autodesk.Revit.DB import FilteredWorksetCollector, WorksetKind, Element

from System.Collections.Generic import * 

import clr
clr.AddReference('RevitAPI')
from Autodesk.Revit.DB import *

clr.AddReference('ProtoGeometry')                       
from Autodesk.DesignScript.Geometry import *            
        
clr.AddReference("RevitNodes")                          
import Revit                                            
clr.ImportExtensions(Revit.Elements)                    
clr.ImportExtensions(Revit.GeometryConversion)         

clr.AddReference("RevitServices")                       
import RevitServices                                    
from RevitServices.Persistence import DocumentManager    

####################################################################################################################

doc = __revit__.ActiveUIDocument.Document

uiapp = DocumentManager.Instance.CurrentUIApplication   
app = uiapp.Application                                

uidoc = __revit__.ActiveUIDocument
activeV = doc.ActiveView

##################################################################################################################

# Reading an excel file using Python 
import xlrd 
from xlrd import open_workbook 


#Select Excel File from Folder

logger = script.get_logger()
# if__name__ == '__main__':
source_file = forms.pick_file(file_ext='xlsx')

# Give the location of Excel the file 
loc = source_file

# To open Workbook 
wb = xlrd.open_workbook(loc)
sheet = wb.sheet_by_index(0) 

#####################################################################################################################
# Read Excel Parameters and Family Category

identifier_param_to_read = sheet.col_values(1)

# Column values in Excel File
occupancy_type_identity = sheet.col_values(1)
occupancy_factor_NBC = sheet.col_values(2)
occupancy_factor_SBC = sheet.col_values(3)
occupancy_factor_IBC = sheet.col_values(4)
occupancy_factor_NFPA = sheet.col_values(5)
occupancy_factor_DCD = sheet.col_values(6)
occupancy_factor_BS = sheet.col_values(7)
occupancy_factor_FN = sheet.col_values(8)

occupancy_type_dictionary = {z[0]:list(z[1:]) for z in zip(occupancy_type_identity, occupancy_factor_NBC, occupancy_factor_SBC, occupancy_factor_IBC, occupancy_factor_NFPA, occupancy_factor_DCD, occupancy_factor_BS, occupancy_factor_FN)}

####################################################################################################################

def format_length(length_value, doc = None):
    doc = doc or HOST_APP.doc
    return DB.UnitFormatUtils.Format(units = doc.GetUnits(), unitType = DB.UnitType.UT_Length, value = length_value, maxAccuracy = False, forEditing =False)

####################################################################################################################
# Function to acquire all elements of category & get parameter value by name 

def all_elements_of_category(category):
	return FilteredElementCollector(doc).OfCategory(category).WhereElementIsNotElementType().ToElements()

####################################################################################################################
# Function to read Shared Parameter values as String

def shared_parameter_values(elems, parameter_name):
    elem_param_values = []
    for e in elems:
        for param in e.Parameters:
            if param.IsShared and param.Definition.Name == parameter_name:
                paramValue = e.get_Parameter(param.GUID)
                elem_param_values.append(paramValue.AsString())
    return elem_param_values

####################################################################################################################
# Function to write Shared Parameter values

def set_parameter_by_name(element, parameterName, value):
	element.LookupParameter(parameterName).Set(value)

####################################################################################################################

def all_elements_with_type_parameter_AsDouble(sample_doors, door_family_type_parameter):
    door_family_test = []
    door_family_param = []
    
    for d in sample_doors:
        door_type = d.Symbol
        door_family_param = door_type.LookupParameter(door_family_type_parameter)
        temp = []
        if door_family_param:
            temp = door_family_param.AsDouble()
            door_family_test.append(temp)
        else:
            temp = 'fail'
            door_family_test.append(temp)
    return door_family_test

def unit_conversion(revit_value_in_feet):
    resultant_value_from_revit = [float(x) for x in revit_value_in_feet]
    resultant_value_unit_conversion = [format_length(x) for x in resultant_value_from_revit]
    resultant_value_converted_to_mm = [int(x) for x in resultant_value_unit_conversion]
    return(resultant_value_converted_to_mm)

#####################################################################################################################
# Function to print Output statements for None & Invalid Types

def output_statement(sample_room_num_with_issues, sample_room_name_with_issues):
 
    sample_room_num_with_mismatch = ['Room Number: ' + item + ', ' for item in sample_room_num_with_issues]
    sample_room_name_with_mismatch = ['Room Name: ' + item + '. ' for item in sample_room_name_with_issues]
   
    sample_test_issues = [i + j for i,j in zip(sample_room_num_with_mismatch, sample_room_name_with_mismatch)]
    for issues in sample_test_issues:
        print(issues)
        
 #####################################################################################################################
# Function to print Output statements for Door Issues

# def output_statement_doors(sample_room_num_with_issues, sample_room_name_with_issues):
 
#     sample_room_num_with_mismatch = ['Room Number: ' + item + ', ' for item in sample_room_num_with_issues]
#     sample_room_name_with_mismatch = ['Room Name: ' + item + '. ' for item in sample_room_name_with_issues]
   
#     sample_test_issues = [i + j for i,j in zip(sample_room_num_with_mismatch, sample_room_name_with_mismatch)]
#     for issues in sample_test_issues:
#         print(issues)       
        
        
        
######################################################################################################################
# Acquireing Doors and their Element IDs

doors = all_elements_of_category(BuiltInCategory.OST_Doors)
door_comments = [d.get_Parameter(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS).AsString() for d in doors]
# print(door_comments)
exclusions = ["ROLLING SHUTTER", "ACCESS PANEL", "CLOSET DOOR", "Curtain wall door"]

indices_for_non_glazed_doors = [i for i, x in enumerate(door_comments) if x not in exclusions]
# print(indices_for_non_glazed_doors)

##############
# Filter Doors

doors = [doors[i] for i in indices_for_non_glazed_doors]
door_room_numbers = shared_parameter_values(doors, 'Room_Number')
door_numbers = [d.get_Parameter(BuiltInParameter.DOOR_NUMBER).AsString() for d in doors]
                              
######################################################################################################################
# Acquireing Rooms 
                                
rooms = all_elements_of_category(BuiltInCategory.OST_Rooms)
room_numbers = [r.get_Parameter(BuiltInParameter.ROOM_NUMBER).AsString() for r in rooms]
# print(room_numbers)
room_names = [r.get_Parameter(BuiltInParameter.ROOM_NAME).AsString() for r in rooms]
# print(room_name)

######################################################################################################################
# Get Room Occupancy Type

test_room_occupancy_type = [r.get_Parameter(BuiltInParameter.ROOM_OCCUPANCY).AsString() for r in rooms]
# print(test_room_occupancy_type) 

######################################################################################################################
# Rooms with no Occupancy Type

filter_rooms_with_no_occupancy_type_index = [ i for i, x in enumerate(test_room_occupancy_type) if x == None]
rooms_with_no_occupancy_type =[ rooms[i] for i in filter_rooms_with_no_occupancy_type_index ]
rooms_numbers_with_no_occupancy_type = [room_numbers[i] for i in filter_rooms_with_no_occupancy_type_index]
room_names_with_no_occupancy_type = [room_names[i] for i in filter_rooms_with_no_occupancy_type_index]
print('*'*120)
if len(room_names_with_no_occupancy_type) == 0:
    print('All Rooms have Occupancy Type Assigned')
else:
    print('The following Rooms have no Occupancy Type assigned:')
    # rooms_with_no_occupancy_type_issue = output_statement(rooms_numbers_with_no_occupancy_type,room_names_with_no_occupancy_type ) 
print('*'*120)

######################################################################################################################
# Filtered Rooms with Occupancy Type

filter_rooms_with_occupancy_type_index = [i for i, x in enumerate(test_room_occupancy_type) if x != None] 
# print(filter_rooms_with_occupancy_type_index)

rooms_with_occupancy_type = [rooms[i] for i in filter_rooms_with_occupancy_type_index]
rooms_numbers_with_occupancy_type = [room_numbers[i] for i in filter_rooms_with_occupancy_type_index]
room_names_with_occupancy_type = [room_names[i] for i in filter_rooms_with_occupancy_type_index]
room_occupancy_type = [test_room_occupancy_type[i] for i in filter_rooms_with_occupancy_type_index]
# print(room_occupancy_type)

######################################################################################################################
# Rooms with Invalid Occupancy Type

room_occupancy_type_invalid = list((set(room_occupancy_type).difference(occupancy_type_identity)))
index_of_invalid_room_occupancy_type = []
for i in range(len(room_occupancy_type)):
    if room_occupancy_type[i] in room_occupancy_type_invalid:
        index_of_invalid_room_occupancy_type.append(i)
# print(index_of_invalid_room_occupancy_type)

rooms_with_invalid_occupancy_type = [rooms_with_occupancy_type[i] for i in index_of_invalid_room_occupancy_type]
rooms_numbers_with_invalid_occupancy_type = [rooms_numbers_with_occupancy_type[i] for i in index_of_invalid_room_occupancy_type]
room_names_with_invalid_occupancy_type = [room_names_with_occupancy_type[i] for i in index_of_invalid_room_occupancy_type]
room_occupancy_type_invalid = [room_occupancy_type[i] for i in index_of_invalid_room_occupancy_type]
# print(room_occupancy_type_invalid)

if len(room_occupancy_type_invalid) == 0:
    print('All Rooms with Occupancy Type provided are valid')
else:
    print('The following Rooms have invalid Occupancy Type assigned.\nVERY IMPORTANT- Please fix all invalid Occupancy Types, it will cause incorrect calculations.')
    rooms_with_invalid_occupancy_type_issue = output_statement(rooms_numbers_with_invalid_occupancy_type,room_names_with_invalid_occupancy_type) 
print('*'*120)

######################################################################################################################
# Rooms with Valid Occupancy Type

set_index_of_invalid_room_occupancy_type = set(index_of_invalid_room_occupancy_type) 
rooms_with_valid_occupancy_type = [e for i, e in enumerate(rooms_with_occupancy_type) if i not in set_index_of_invalid_room_occupancy_type]
room_valid_occupancy_types = [e for i, e in enumerate(room_occupancy_type) if i not in set_index_of_invalid_room_occupancy_type]
# print(room_valid_occupancy_types)

area_in_rooms_with_valid_occupancy_type = [ar.get_Parameter(BuiltInParameter.ROOM_AREA).AsDouble() for ar in rooms_with_valid_occupancy_type]
area_in_rooms_with_valid_occupancy_type = [round((ar/10)) for ar in area_in_rooms_with_valid_occupancy_type]
area_in_rooms_with_valid_occupancy_type = [1 if x == 0 else x for x in area_in_rooms_with_valid_occupancy_type]
# print(area_in_rooms_with_valid_occupancy_type)

####################################################################################################################
# Occupant Count Calculation

def occupant_count_calculation(sheet_col_for_code):
    values_from_dict_code = [occupancy_type_dictionary[x][sheet_col_for_code] for x in room_valid_occupancy_types]
    
    ################################################################################################################
    # Filter Rooms, Occupancies with values from Dictionaries not as 'NA'
    
    filter_occupancy_values_index_with_non_NA = [i for i, x in enumerate(values_from_dict_code) if x != 'NA']
    rooms_with_valid_occupancy_values = [rooms_with_valid_occupancy_type[i] for i in  filter_occupancy_values_index_with_non_NA]
    room_valid_occupancy_values = [values_from_dict_code[i] for i in filter_occupancy_values_index_with_non_NA]
    area_in_rooms_with_valid_occupancy_values = [area_in_rooms_with_valid_occupancy_type[i] for i in filter_occupancy_values_index_with_non_NA]
    occupant_count_as_per_code = [x/y for x,y in zip(map(float, area_in_rooms_with_valid_occupancy_values), map(float, room_valid_occupancy_values))]
    
    ################################################################################################################
    # Calculate Occupant Count
        
    occupant_count_as_per_code = [long(round(oc)) for oc in occupant_count_as_per_code]
    occupant_count_as_per_code = [int(oc) for oc in occupant_count_as_per_code]
    occupant_count_as_per_code = [ 1 if x == 0 else x for x in occupant_count_as_per_code]
    occupant_count_total = sum(occupant_count_as_per_code)
    
    ################################################################################################################
    # Calculating Floor Level Occupancies 
    
    room_level_name = [r.Level.Name for r in rooms_with_valid_occupancy_values]
    room_level_elevation = [r.Level.Elevation for r in rooms_with_valid_occupancy_values]
      
    temp_list = []
    for i in range(len(room_level_elevation)):
        temp_list.append([room_level_elevation[i], i])
    temp_list.sort()
    
    index_of_room_level_sorted = []
    for x in temp_list:
        index_of_room_level_sorted.append(x[1])

    sorted_room_level_elevation_name = [room_level_name[i] for i in index_of_room_level_sorted]
    create_sublist_by_level_name = [list(y) for x,y in itertools.groupby(sorted_room_level_elevation_name)]
    
    length_of_sublist_of_level_name = [len(x) for x in create_sublist_by_level_name]
    
    sorted_rooms_by_level = [rooms_with_valid_occupancy_values[i] for i in index_of_room_level_sorted]
    create_sublist_for_rooms = iter(sorted_rooms_by_level)
    create_sublist_for_rooms = [list(islice(create_sublist_for_rooms, elem)) for elem in length_of_sublist_of_level_name]

    sorted_room_level_elevation = [room_level_elevation[i] for i in index_of_room_level_sorted]
    create_sublist_for_levels_of_rooms = iter(sorted_room_level_elevation)
    create_sublist_for_levels_of_rooms = [list(islice(create_sublist_for_levels_of_rooms, elem)) for elem in length_of_sublist_of_level_name]
    
    sorted_room_valid_occupancy_values = [room_valid_occupancy_values[i] for i in index_of_room_level_sorted] 
    create_sublist_for_room_valid_occupancy_values_by_level = iter(sorted_room_valid_occupancy_values)
    create_sublist_for_room_valid_occupancy_values_by_level = [list(islice(create_sublist_for_room_valid_occupancy_values_by_level, elem)) for elem in length_of_sublist_of_level_name]
    
    sorted_room_occupant_count_by_level = [occupant_count_as_per_code[i] for i in index_of_room_level_sorted]
    create_sublist_for_room_occupant_count_by_level = iter(sorted_room_occupant_count_by_level)
    create_sublist_for_room_occupant_count_by_level = [list(islice(create_sublist_for_room_occupant_count_by_level, elem)) for elem in length_of_sublist_of_level_name]
    length_of_sublist_for_occupant_count = [len(x) for x in create_sublist_for_room_occupant_count_by_level]
    
    sum_of_occupancy_count_for_each_level = [sum(x) for x in create_sublist_for_room_occupant_count_by_level]
    
    unique_room_level_names = [set(x) for x in create_sublist_by_level_name]
    unique_room_level_names = [list(x) for x in unique_room_level_names]    
    unique_room_level_names = [item for sublist in unique_room_level_names for item in sublist]
    
    egress_capacity_requirement_for_each_level = [round(x * 7.6) for x in sum_of_occupancy_count_for_each_level]
   
    ####################################################################################################################
    # Filtering Rooms with Occupancies greater than 50 ppl. 
    
    index_of_occupant_count_greater_than_fifty = []
    
    for x in create_sublist_for_room_occupant_count_by_level:
        temp = [i for i, y in enumerate(x) if (y > 50) ]
        index_of_occupant_count_greater_than_fifty.append(temp)

    index_of_occupant_count_sublist_without_empty = [i for i, x in enumerate(index_of_occupant_count_greater_than_fifty) if ((len(x) != 0))]
    # print(index_of_occupant_count_sublist_without_empty)
    filter_sublist_of_rooms_at_level_greater_than_50_ppl_not_empty = [create_sublist_for_rooms[i] for i in index_of_occupant_count_sublist_without_empty]
    filter_sublist_of_room_occupant_count_at_level_greater_than_50_ppl_not_empty = [create_sublist_for_room_occupant_count_by_level[i] for i in index_of_occupant_count_sublist_without_empty]
    filter_index_of_sublist_of_room_occupant_count_at_level_greater_than_50_ppl = [index_of_occupant_count_greater_than_fifty[i] for i in index_of_occupant_count_sublist_without_empty ]
    
    
    # Lookup nested Rooms with nested indices for valid rooms in particular Level
    
    filter_sublist_of_rooms_at_level_greater_than_50_ppl = [[filter_sublist_of_rooms_at_level_greater_than_50_ppl_not_empty[sub_idx][item] for item in sublist] for sub_idx, sublist in enumerate(filter_index_of_sublist_of_room_occupant_count_at_level_greater_than_50_ppl)]
    filter_sublist_of_room_occupant_count_at_level_greater_than_50_ppl = [[filter_sublist_of_room_occupant_count_at_level_greater_than_50_ppl_not_empty[sub_idx][item] for item in sublist] for sub_idx, sublist in enumerate(filter_index_of_sublist_of_room_occupant_count_at_level_greater_than_50_ppl)]
    
    length_of_sublist_of_rooms_at_level_greater_than_50_ppl = [len(x) for x in filter_sublist_of_rooms_at_level_greater_than_50_ppl]
       
    #################################################################################################################################################################################
    
    # Rooms with Occupancy greater than 50
    
    flat_list_of_rooms_with_occupancy_greater_than_50_ppl = [item for sublist in filter_sublist_of_rooms_at_level_greater_than_50_ppl for item in sublist]
    room_names_filtered_with_occupancy_greater_than_50_ppl = [r.get_Parameter(BuiltInParameter.ROOM_NAME).AsString() for r in flat_list_of_rooms_with_occupancy_greater_than_50_ppl]
    room_numbers_filtered_with_occupancy_greater_than_50_ppl = [r.get_Parameter(BuiltInParameter.ROOM_NUMBER).AsString() for r in flat_list_of_rooms_with_occupancy_greater_than_50_ppl]
    room_occupant_count_filtered_with_occupancy_greater_than_50_ppl = [item for sublist in filter_sublist_of_room_occupant_count_at_level_greater_than_50_ppl for item in sublist]
    
    # Filter Rooms with Doors that will be checked
        
    lookup_doors_in_rooms_with_occupancy_greater_than_50_ppl = []
    for search_item in room_numbers_filtered_with_occupancy_greater_than_50_ppl:
        search_result = []
        for i in range(len(door_room_numbers)):
            if search_item == door_room_numbers[i]:
                search_result.append(i)
        if len(search_result)>0:
            lookup_doors_in_rooms_with_occupancy_greater_than_50_ppl.append(search_result)
        else:
            lookup_doors_in_rooms_with_occupancy_greater_than_50_ppl.append([None])
    
    # Filtering Rooms with Occupancy greater than 50 ppl but having Doors against those with no doors
    
    index_of_rooms_with_doors_inserted_and_occupancy_greater_than_50_ppl = [i for i, x in enumerate(lookup_doors_in_rooms_with_occupancy_greater_than_50_ppl) if x[0] != None]
    room_numbers_with_doors_and_occupancy_greater_than_50_ppl = [room_numbers_filtered_with_occupancy_greater_than_50_ppl[i] for i in index_of_rooms_with_doors_inserted_and_occupancy_greater_than_50_ppl]
    room_names_with_doors_and_occupancy_greater_than_50_ppl = [room_names_filtered_with_occupancy_greater_than_50_ppl[i] for i in index_of_rooms_with_doors_inserted_and_occupancy_greater_than_50_ppl]
    rooms_with_doors_and_occupancy_greater_than_50_ppl = [flat_list_of_rooms_with_occupancy_greater_than_50_ppl[i] for i in index_of_rooms_with_doors_inserted_and_occupancy_greater_than_50_ppl]
    room_occupant_count_for_rooms_with_doors_and_occupancy_greater_than_50_ppl = [room_occupant_count_filtered_with_occupancy_greater_than_50_ppl[i] for i in index_of_rooms_with_doors_inserted_and_occupancy_greater_than_50_ppl]
    
    # Looking up Doors for Clean List of Rooms with doors and Occupancy greater than 50 ppl.
    
    final_lookup_doors_in_rooms_with_occupancy_greater_than_50_ppl = []
    for search_item in room_numbers_with_doors_and_occupancy_greater_than_50_ppl:
        search_result = []
        for i in range(len(door_room_numbers)):
            if search_item == door_room_numbers[i]:
                search_result.append(i)
        if len(search_result)>0:
            final_lookup_doors_in_rooms_with_occupancy_greater_than_50_ppl.append(search_result)
        else:
            final_lookup_doors_in_rooms_with_occupancy_greater_than_50_ppl.append([None])
    
    length_of_sublist_of_doors_in_rooms_greater_than_50_ppl = [len(x) for x in final_lookup_doors_in_rooms_with_occupancy_greater_than_50_ppl]
    
    # Exists in Rooms with occupancy greater than 50 ppl
    # Door Room Numbers 
    
    acquire_door_room_numbers_for_doors_with_occupancy_greater_than_50_ppl = []
    for f in final_lookup_doors_in_rooms_with_occupancy_greater_than_50_ppl:
        temp = []
        temp = [door_room_numbers[i] for i in f] 
        acquire_door_room_numbers_for_doors_with_occupancy_greater_than_50_ppl.append(temp)
    
    # Doors
    acquire_doors_for_doors_in_rooms_with_occupancy_greater_than_50_ppl = []
    for f in final_lookup_doors_in_rooms_with_occupancy_greater_than_50_ppl:
        temp = []
        temp = [doors[i] for i in f] 
        acquire_doors_for_doors_in_rooms_with_occupancy_greater_than_50_ppl.append(temp)    
    
    # Door List Flattened for acquiring widths
    acquire_doors_for_doors_in_rooms_with_occupancy_greater_than_50_ppl = [item for sublist in  acquire_doors_for_doors_in_rooms_with_occupancy_greater_than_50_ppl for item in sublist]
    
    # Door Widths in Flattened List and conversion from feet to millimeters
    acquire_door_widths_for_doors_in_rooms_with_occupancy_greater_than_50_ppl = all_elements_with_type_parameter_AsDouble(acquire_doors_for_doors_in_rooms_with_occupancy_greater_than_50_ppl, 'Width')
    acquire_door_widths_for_doors_in_rooms_with_occupancy_greater_than_50_ppl = unit_conversion(acquire_door_widths_for_doors_in_rooms_with_occupancy_greater_than_50_ppl)
    
    # Create sublist for Door Widths for further assessment 
    create_sublist_of_door_widths_of_doors_in_rooms_with_occupancy_greater_than_50_ppl = iter(acquire_door_widths_for_doors_in_rooms_with_occupancy_greater_than_50_ppl)
    create_sublist_of_door_widths_of_doors_in_rooms_with_occupancy_greater_than_50_ppl = [list(islice(create_sublist_of_door_widths_of_doors_in_rooms_with_occupancy_greater_than_50_ppl, elem)) for elem in length_of_sublist_of_doors_in_rooms_greater_than_50_ppl]
    
    index_of_list_of_doors_with_one_door_only = [i for i, x in enumerate(create_sublist_of_door_widths_of_doors_in_rooms_with_occupancy_greater_than_50_ppl)  if len(x) < 2]
    room_numbers_with_occupancy_greater_than_fifty_and_one_door_only = [room_numbers_with_doors_and_occupancy_greater_than_50_ppl[i] for i in index_of_list_of_doors_with_one_door_only]
    room_names_with_occupancy_greater_than_fifty_and_one_door_only = [room_names_with_doors_and_occupancy_greater_than_50_ppl[i] for i in index_of_list_of_doors_with_one_door_only]
    rooms_with_occupancy_greater_than_fifty_and_one_door_only = [rooms_with_doors_and_occupancy_greater_than_50_ppl[i] for i in index_of_list_of_doors_with_one_door_only]
    room_occupant_count_for_rooms_with_occupancy_greater_than_fifty_and_one_door_only = [room_occupant_count_for_rooms_with_doors_and_occupancy_greater_than_50_ppl [i] for i in index_of_list_of_doors_with_one_door_only]
        
    index_of_list_of_doors_with_more_than_one_door = [i for i, x in enumerate(create_sublist_of_door_widths_of_doors_in_rooms_with_occupancy_greater_than_50_ppl)  if len(x) >= 2]
    room_numbers_with_occupancy_greater_than_fifty_and_more_than_one_door = [room_numbers_with_doors_and_occupancy_greater_than_50_ppl[i] for i in index_of_list_of_doors_with_more_than_one_door]
    room_names_with_occupancy_greater_than_fifty_and_more_than_one_door = [room_names_with_doors_and_occupancy_greater_than_50_ppl[i] for i in index_of_list_of_doors_with_more_than_one_door]
    rooms_with_occupancy_greater_than_fifty_and_more_than_one_door = [rooms_with_doors_and_occupancy_greater_than_50_ppl[i] for i in index_of_list_of_doors_with_more_than_one_door]
    room_occupant_count_for_rooms_with_occupancy_greater_than_fifty_and_more_than_one_door = [room_occupant_count_for_rooms_with_doors_and_occupancy_greater_than_50_ppl [i] for i in index_of_list_of_doors_with_more_than_one_door]
        
    door_widths_for_doors_in_rooms_with_occupancy_greater_than_fifty_and_more_than_one_door = [create_sublist_of_door_widths_of_doors_in_rooms_with_occupancy_greater_than_50_ppl[i] for i in index_of_list_of_doors_with_more_than_one_door]
    total_egress_width_for_doors_in_rooms_with_occupancy_greater_than_fifty_and_more_than_one_door = [sum(x) for x in door_widths_for_doors_in_rooms_with_occupancy_greater_than_fifty_and_more_than_one_door]
    door_width_required_for_doors_in_rooms_with_occupancy_greater_than_fifty_and_more_than_one_door = [float(x*7.6) for x in room_occupant_count_for_rooms_with_occupancy_greater_than_fifty_and_more_than_one_door]
               
    index_of_compare_door_width_against_egress_width_required_for_more_than_one_door = [idx for idx,x in enumerate(total_egress_width_for_doors_in_rooms_with_occupancy_greater_than_fifty_and_more_than_one_door) if x  > door_width_required_for_doors_in_rooms_with_occupancy_greater_than_fifty_and_more_than_one_door]
                                                                                            
    # index_of_compare_door_width_against_egress_width_required_for_more_than_one_door = [idx for idx,x in enumerate(total_egress_width_for_doors_in_rooms_with_occupancy_greater_than_fifty_and_more_than_one_door) if x  < door_width_required_for_doors_in_rooms_with_occupancy_greater_than_fifty_and_more_than_one_door]
                                                                                            
                                                                                            
                                                                                            
    ################################################################################################################################
    # Write Occupancy Values
    
    occupant_count_as_per_code_for_writing_to_param = [ str(oc) for oc in occupant_count_as_per_code]
    
    # Start Transaction
    
    t =  Transaction(doc, 'script')
    write_oc_pass = list()
    write_oc_fail = list()

    t.Start()
    for r in rooms_with_valid_occupancy_values:
        try:
            write_oc_pass = [ set_parameter_by_name(r,'Occupant',oc) for r,oc in zip(rooms_with_valid_occupancy_values, occupant_count_as_per_code_for_writing_to_param)]
        except:
            write_oc_fail.append(oc)
       
    t.Commit()     

    ################################################################################################################################
    # Write Occupancy Values as 'NA' for Rooms with no Occupant count
    
    filter_occupancy_values_index_with_NA = [ i for i, x in enumerate(values_from_dict_code) if x == 'NA']
    rooms_with_NA_occupancy_values = [rooms_with_valid_occupancy_type[i] for i in filter_occupancy_values_index_with_NA]
    room_NA_occupancy_values = [values_from_dict_code[i] for i in filter_occupancy_values_index_with_NA]
    
    # Start Transaction
    
    t =  Transaction(doc, 'script')
    write_oc_pass = list()
    write_oc_fail = list()

    t.Start()
    for r in rooms_with_NA_occupancy_values:
        try:
            write_oc_pass = [set_parameter_by_name(r,'Occupant',oc) for r,oc in zip(rooms_with_NA_occupancy_values, room_NA_occupancy_values)]
        except:
            write_oc_fail.append(oc)
       
    t.Commit()     
   
    return(occupant_count_total, unique_room_level_names, sum_of_occupancy_count_for_each_level, egress_capacity_requirement_for_each_level, index_of_compare_door_width_against_egress_width_required_for_more_than_one_door, room_numbers_with_occupancy_greater_than_fifty_and_more_than_one_door, room_names_with_occupancy_greater_than_fifty_and_more_than_one_door, door_width_required_for_doors_in_rooms_with_occupancy_greater_than_fifty_and_more_than_one_door, total_egress_width_for_doors_in_rooms_with_occupancy_greater_than_fifty_and_more_than_one_door)
           
####################################################################################################################  

def output_statement_for_rooms_of_each_level(sample_unique_room_level_names, sample_sum_of_occupancy_count_for_each_level, sample_egress_capacity_requirement_for_each_level):
    
    sample_sum_of_occupancy_count_for_each_level = [str(x) for x in sample_sum_of_occupancy_count_for_each_level]
    sample_egress_capacity_requirement_for_each_level = [str(x) for x in sample_egress_capacity_requirement_for_each_level]
    
    sample_unique_room_level_names_output = ['Level- ' + item + ' has ' for item in sample_unique_room_level_names]
    sample_sum_of_occupancy_count_for_each_level_output = [item + ' persons as Occupant Load and the minimum egress width of staircases required is ' for item in sample_sum_of_occupancy_count_for_each_level]
    sample_egress_capacity_requirement_for_each_level_output = [item + ' mm.' for item in sample_egress_capacity_requirement_for_each_level]

    sample_output_for_room_level_occupancy_sorted = [i + j + k for i,j,k in zip(sample_unique_room_level_names_output, sample_sum_of_occupancy_count_for_each_level_output, sample_egress_capacity_requirement_for_each_level_output)]
    for output in sample_output_for_room_level_occupancy_sorted:
        print(output)

######################################################################################################################

# Function to print Output statements for Door Issues

def output_statement_doors(sample_room_num_with_egress_width_issues, sample_room_name_with_egress_width_issues, sample_egress_width_for_rooms_with_insuff_egress_width, sample_egress_width_to_achieve_for_rooms_with_insuff_egress_width):
 
    sample_room_num_with_egress_width_issues = ['Room Number: ' + item + ', ' for item in sample_room_num_with_egress_width_issues]
    sample_room_name_with_egress_width_issues = ['Room Name: ' + item + ', ' for item in sample_room_name_with_egress_width_issues]
    sample_egress_width_for_rooms_with_insuff_egress_width = ['Total Egress Width currently: ' + item + ', ' for item in sample_egress_width_for_rooms_with_insuff_egress_width]
    sample_egress_width_to_achieve_for_rooms_with_insuff_egress_width = ['Total Egress Width to achieve: ' + item + '. ' for item in sample_egress_width_to_achieve_for_rooms_with_insuff_egress_width]
    sample_test_issues_for_egress_width = [i + j + k + l for i,j,k,l in zip(sample_room_num_with_egress_width_issues, sample_room_name_with_egress_width_issues, sample_egress_width_for_rooms_with_insuff_egress_width, sample_egress_width_to_achieve_for_rooms_with_insuff_egress_width)]
    for issues in sample_test_issues_for_egress_width:
        print(issues)       
        
####################################################################################################################

from rpw.ui.forms import SelectFromList
from rpw.utils.coerce import to_category 

####################################################################################################################    

userInputcategory = SelectFromList('Select Fire Code to follow', ['01.NBC', '02.SBC', '03.IBC', '04.NFPA', '05.DCD', '06.BS', '07.FN'])
userInputcategory = str(userInputcategory)

######################################################################################################################

if userInputcategory == '01.NBC':
    occupancy_calculation_as_per_NBC = occupant_count_calculation(0)
    occupant_count_total_as_per_NBC = occupancy_calculation_as_per_NBC[0]
    occupant_level_name_as_per_NBC = occupancy_calculation_as_per_NBC[1]
    occupant_count_for_each_level_as_per_NBC = occupancy_calculation_as_per_NBC[2]
    egress_capacity_for_each_level_as_per_NBC = occupancy_calculation_as_per_NBC[3]
    print("The total occupant count for the building, as per NBC is : {} people.".format(occupant_count_total_as_per_NBC))
    print('*'*120)
    occupancy_calculation_per_level_as_per_NBC = output_statement_for_rooms_of_each_level(occupant_level_name_as_per_NBC,  occupant_count_for_each_level_as_per_NBC, egress_capacity_for_each_level_as_per_NBC)
    print('*'*120)
    
    index_of_compare_door_width_against_egress_width_required_for_more_than_one_door_as_per_NBC = occupancy_calculation_as_per_NBC[4]
    room_numbers_with_occupancy_greater_than_fifty_and_more_than_one_door_as_per_NBC = occupancy_calculation_as_per_NBC[5]
    room_names_with_occupancy_greater_than_fifty_and_more_than_one_door_as_per_NBC = occupancy_calculation_as_per_NBC[6]
    door_widths_with_occupancy_greater_than_fifty_and_more_than_one_door_as_per_NBC = occupancy_calculation_as_per_NBC[7]
    total_egress_width_for_room_with_ocupancy_greater_than_fifty_and_more_than_one_door_as_per_NBC = occupancy_calculation_as_per_NBC[8]
    
          
    if len(index_of_compare_door_width_against_egress_width_required_for_more_than_one_door_as_per_NBC) != 0:
        room_numbers_with_occupancy_greater_than_fifty_but_insufficient_egress_width_NBC = [room_numbers_with_occupancy_greater_than_fifty_and_more_than_one_door_as_per_NBC[i] for i in index_of_compare_door_width_against_egress_width_required_for_more_than_one_door_as_per_NBC]
        room_names_with_occupancy_greater_than_fifty_but_insufficient_egress_width_NBC = [room_names_with_occupancy_greater_than_fifty_and_more_than_one_door_as_per_NBC[i] for i in index_of_compare_door_width_against_egress_width_required_for_more_than_one_door_as_per_NBC ]
        door_widths_for_room_with_occupancy_greater_than_fifty_but_insufficient_egress_width_NBC = [door_widths_with_occupancy_greater_than_fifty_and_more_than_one_door_as_per_NBC[i] for i in index_of_compare_door_width_against_egress_width_required_for_more_than_one_door_as_per_NBC]
        total_egress_width_for_room_with_ocupancy_greater_than_fifty_but_insufficient_egress_width_NBC = [total_egress_width_for_room_with_ocupancy_greater_than_fifty_and_more_than_one_door_as_per_NBC[i] for i in index_of_compare_door_width_against_egress_width_required_for_more_than_one_door_as_per_NBC]                                             
        egress_width_to_achieve_for_rooms_with_insuff_egress_width_as_per_NBC = [str(x-y) for x,y in  zip(total_egress_width_for_room_with_ocupancy_greater_than_fifty_but_insufficient_egress_width_NBC,door_widths_for_room_with_occupancy_greater_than_fifty_but_insufficient_egress_width_NBC) ]
        door_widths_for_room_with_occupancy_greater_than_fifty_but_insufficient_egress_width_NBC = [str(x) for x in door_widths_for_room_with_occupancy_greater_than_fifty_but_insufficient_egress_width_NBC]
        print('Total Egress Width for the following Rooms, with Occupant Count greater than 50, needs to be updated to cater to the Occupant Load:-')        
        egress_width_output_for_rooms_with_more_than_one_door_and_insuff_egress_width_as_per_NBC = output_statement_doors(room_numbers_with_occupancy_greater_than_fifty_but_insufficient_egress_width_NBC, room_names_with_occupancy_greater_than_fifty_but_insufficient_egress_width_NBC, door_widths_for_room_with_occupancy_greater_than_fifty_but_insufficient_egress_width_NBC, egress_width_to_achieve_for_rooms_with_insuff_egress_width_as_per_NBC)
        print('*'*120)   
    else:
        print('Total Egress Width for all Rooms with Occupant Count greater than 50, cater to the Occupant Load')
    
    
    
        
######################################################################################################################
elif userInputcategory == '02.SBC':
    occupancy_calculation_as_per_SBC = occupant_count_calculation(1)
    occupant_count_total_as_per_SBC = occupancy_calculation_as_per_SBC[0]
    occupant_level_name_as_per_SBC = occupancy_calculation_as_per_SBC[1]
    occupant_count_for_each_level_as_per_SBC = occupancy_calculation_as_per_SBC[2]
    egress_capacity_for_each_level_as_per_SBC = occupancy_calculation_as_per_SBC[3]
    print("The total occupant count for the building, as per SBC is : {} people.".format(occupant_count_total_as_per_SBC))
    print('*'*120)
    occupancy_calculation_per_level_as_per_SBC = output_statement_for_rooms_of_each_level(occupant_level_name_as_per_SBC, occupant_count_for_each_level_as_per_SBC, egress_capacity_for_each_level_as_per_SBC)
    print('*'*120)    
    
######################################################################################################################   
elif userInputcategory == '03.IBC':
    occupancy_calculation_as_per_IBC = occupant_count_calculation(2)
    occupant_count_total_as_per_IBC = occupancy_calculation_as_per_IBC[0]
    occupant_level_name_as_per_IBC = occupancy_calculation_as_per_IBC[1]
    occupant_count_for_each_level_as_per_IBC = occupancy_calculation_as_per_IBC[2]
    egress_capacity_for_each_level_as_per_IBC = occupancy_calculation_as_per_IBC[3]    
    print("The total occupant count for the building, as per IBC is : {} people.".format(occupant_count_total_as_per_IBC))
    print('*'*120)
    occupancy_calculation_per_level_as_per_IBC = output_statement_for_rooms_of_each_level(occupant_level_name_as_per_IBC, occupant_count_for_each_level_as_per_IBC, egress_capacity_for_each_level_as_per_IBC)
    print('*'*120)    
 
######################################################################################################################
elif userInputcategory == '04.NFPA':
    occupancy_calculation_as_per_NFPA = occupant_count_calculation(3)
    occupant_count_total_as_per_NFPA = occupancy_calculation_as_per_NFPA[0]
    occupant_level_name_as_per_NFPA = occupancy_calculation_as_per_NFPA[1]
    occupant_count_for_each_level_as_per_NFPA = occupancy_calculation_as_per_NFPA[2]
    egress_capacity_for_each_level_as_per_NFPA = occupancy_calculation_as_per_NFPA[3]  
    print("The total occupant count for the building, as per NFPA is : {} people.".format(occupant_count_total_as_per_NFPA))
    print('*'*120)
    occupancy_calculation_per_level_as_per_NFPA = output_statement_for_rooms_of_each_level(occupant_level_name_as_per_NFPA, occupant_count_for_each_level_as_per_NFPA, egress_capacity_for_each_level_as_per_NFPA)
    print('*'*120)     
    
######################################################################################################################
elif userInputcategory == '05.DCD':
    occupancy_calculation_as_per_DCD = occupant_count_calculation(4)
    occupant_count_total_as_per_DCD = occupancy_calculation_as_per_DCD[0]
    occupant_level_name_as_per_DCD = occupancy_calculation_as_per_DCD[1]
    occupant_count_for_each_level_as_per_DCD = occupancy_calculation_as_per_DCD[2]
    egress_capacity_for_each_level_as_per_DCD = occupancy_calculation_as_per_DCD[3]     
    print("The total occupant count for the building, as per DCD is : {} people.".format(occupant_count_total_as_per_DCD))
    print('*'*120)
    occupancy_calculation_per_level_as_per_DCD = output_statement_for_rooms_of_each_level(occupant_level_name_as_per_DCD, occupant_count_for_each_level_as_per_DCD, egress_capacity_for_each_level_as_per_DCD)
    print('*'*120)     
 
######################################################################################################################
elif userInputcategory == '06.BS':
    occupancy_calculation_as_per_BS = occupant_count_calculation(5)
    occupant_count_total_as_per_BS = occupancy_calculation_as_per_BS[0]
    occupant_level_name_as_per_BS = occupancy_calculation_as_per_BS[1]
    occupant_count_for_each_level_as_per_BS = occupancy_calculation_as_per_BS[2]
    egress_capacity_for_each_level_as_per_BS = occupancy_calculation_as_per_BS[3]   
    print("The total occupant count for the building, as per BS is : {} people.".format(occupant_count_total_as_per_BS))
    print('*'*120)
    occupancy_calculation_per_level_as_per_BS = output_statement_for_rooms_of_each_level(occupant_level_name_as_per_BS, occupant_count_for_each_level_as_per_BS, egress_capacity_for_each_level_as_per_BS)
    print('*'*120)    
    
######################################################################################################################
elif userInputcategory == '07.FN':
    occupancy_calculation_as_per_FN = occupant_count_calculation(6)
    occupant_count_total_as_per_FN = occupancy_calculation_as_per_FN[0]
    occupant_level_name_as_per_FN = occupancy_calculation_as_per_FN[1]
    occupant_count_for_each_level_as_per_FN = occupancy_calculation_as_per_FN[2]
    egress_capacity_for_each_level_as_per_FN = occupancy_calculation_as_per_FN[3]     
    print("The total occupant count for the building, as per FN is : {} people.".format(occupant_count_total_as_per_FN))
    print('*'*120)
    occupancy_calculation_per_level_as_per_FN = output_statement_for_rooms_of_each_level(occupant_level_name_as_per_FN, occupant_count_for_each_level_as_per_FN, egress_capacity_for_each_level_as_per_FN)
    print('*'*120)
      
######################################################################################################################
else:
    pass

#####################################################################################################################
 
